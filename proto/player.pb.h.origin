// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_INCLUDED_player_2eproto
#define PROTOBUF_INCLUDED_player_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_player_2eproto 

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_player_2eproto
namespace TCCamp {
class AddReq;
class AddReqDefaultTypeInternal;
extern AddReqDefaultTypeInternal _AddReq_default_instance_;
class AddRsp;
class AddRspDefaultTypeInternal;
extern AddRspDefaultTypeInternal _AddRsp_default_instance_;
class Float3;
class Float3DefaultTypeInternal;
extern Float3DefaultTypeInternal _Float3_default_instance_;
class Float4;
class Float4DefaultTypeInternal;
extern Float4DefaultTypeInternal _Float4_default_instance_;
class PlayerCreateReq;
class PlayerCreateReqDefaultTypeInternal;
extern PlayerCreateReqDefaultTypeInternal _PlayerCreateReq_default_instance_;
class PlayerCreateRsp;
class PlayerCreateRspDefaultTypeInternal;
extern PlayerCreateRspDefaultTypeInternal _PlayerCreateRsp_default_instance_;
class PlayerLoginReq;
class PlayerLoginReqDefaultTypeInternal;
extern PlayerLoginReqDefaultTypeInternal _PlayerLoginReq_default_instance_;
class PlayerLoginRsp;
class PlayerLoginRspDefaultTypeInternal;
extern PlayerLoginRspDefaultTypeInternal _PlayerLoginRsp_default_instance_;
class PlayerSaveData;
class PlayerSaveDataDefaultTypeInternal;
extern PlayerSaveDataDefaultTypeInternal _PlayerSaveData_default_instance_;
class PlayerSyncData;
class PlayerSyncDataDefaultTypeInternal;
extern PlayerSyncDataDefaultTypeInternal _PlayerSyncData_default_instance_;
class PlayerSyncInfo;
class PlayerSyncInfoDefaultTypeInternal;
extern PlayerSyncInfoDefaultTypeInternal _PlayerSyncInfo_default_instance_;
class ServerSyncInfo;
class ServerSyncInfoDefaultTypeInternal;
extern ServerSyncInfoDefaultTypeInternal _ServerSyncInfo_default_instance_;
class SyncAnnounce;
class SyncAnnounceDefaultTypeInternal;
extern SyncAnnounceDefaultTypeInternal _SyncAnnounce_default_instance_;
}  // namespace TCCamp
namespace google {
namespace protobuf {
template<> ::TCCamp::AddReq* Arena::CreateMaybeMessage<::TCCamp::AddReq>(Arena*);
template<> ::TCCamp::AddRsp* Arena::CreateMaybeMessage<::TCCamp::AddRsp>(Arena*);
template<> ::TCCamp::Float3* Arena::CreateMaybeMessage<::TCCamp::Float3>(Arena*);
template<> ::TCCamp::Float4* Arena::CreateMaybeMessage<::TCCamp::Float4>(Arena*);
template<> ::TCCamp::PlayerCreateReq* Arena::CreateMaybeMessage<::TCCamp::PlayerCreateReq>(Arena*);
template<> ::TCCamp::PlayerCreateRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerCreateRsp>(Arena*);
template<> ::TCCamp::PlayerLoginReq* Arena::CreateMaybeMessage<::TCCamp::PlayerLoginReq>(Arena*);
template<> ::TCCamp::PlayerLoginRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerLoginRsp>(Arena*);
template<> ::TCCamp::PlayerSaveData* Arena::CreateMaybeMessage<::TCCamp::PlayerSaveData>(Arena*);
template<> ::TCCamp::PlayerSyncData* Arena::CreateMaybeMessage<::TCCamp::PlayerSyncData>(Arena*);
template<> ::TCCamp::PlayerSyncInfo* Arena::CreateMaybeMessage<::TCCamp::PlayerSyncInfo>(Arena*);
template<> ::TCCamp::ServerSyncInfo* Arena::CreateMaybeMessage<::TCCamp::ServerSyncInfo>(Arena*);
template<> ::TCCamp::SyncAnnounce* Arena::CreateMaybeMessage<::TCCamp::SyncAnnounce>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace TCCamp {

enum CLIENT_CMD {
  CLIENT_CMD_INVALID = 0,
  CLIENT_CMD_BEGIN = 30000,
  CLIENT_PING = 30001,
  CLIENT_ADD_REQ = 30003,
  CLIENT_LOGIN_REQ = 30004,
  CLIENT_CREATE_REQ = 30005,
  CLIENT_ANNOUNCE_REQ = 30006,
  CLIENT_CMD_END = 33000,
  CLIENT_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CLIENT_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CLIENT_CMD_IsValid(int value);
const CLIENT_CMD CLIENT_CMD_MIN = CLIENT_CMD_INVALID;
const CLIENT_CMD CLIENT_CMD_MAX = CLIENT_CMD_END;
const int CLIENT_CMD_ARRAYSIZE = CLIENT_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CLIENT_CMD_descriptor();
inline const ::std::string& CLIENT_CMD_Name(CLIENT_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CLIENT_CMD_descriptor(), value);
}
inline bool CLIENT_CMD_Parse(
    const ::std::string& name, CLIENT_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CLIENT_CMD>(
    CLIENT_CMD_descriptor(), name, value);
}
enum SERVER_CMD {
  SERVER_CMD_INVALID = 0,
  SERVER_CMD_BEGIN = 1000,
  SERVER_PONG = 1001,
  SERVER_ADD_RSP = 1003,
  SERVER_LOGIN_RSP = 1004,
  SERVER_CREATE_RSP = 1005,
  SERVER_ANNOUNCE_RSP = 1006,
  GM_OPERATE_RSP = 1100,
  SERVER_CMD_END = 10000,
  SERVER_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVER_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVER_CMD_IsValid(int value);
const SERVER_CMD SERVER_CMD_MIN = SERVER_CMD_INVALID;
const SERVER_CMD SERVER_CMD_MAX = SERVER_CMD_END;
const int SERVER_CMD_ARRAYSIZE = SERVER_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_CMD_descriptor();
inline const ::std::string& SERVER_CMD_Name(SERVER_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_CMD_descriptor(), value);
}
inline bool SERVER_CMD_Parse(
    const ::std::string& name, SERVER_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_CMD>(
    SERVER_CMD_descriptor(), name, value);
}
// ===================================================================

class AddReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.AddReq) */ {
 public:
  AddReq();
  virtual ~AddReq();

  AddReq(const AddReq& from);

  inline AddReq& operator=(const AddReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddReq(AddReq&& from) noexcept
    : AddReq() {
    *this = ::std::move(from);
  }

  inline AddReq& operator=(AddReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReq* internal_default_instance() {
    return reinterpret_cast<const AddReq*>(
               &_AddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddReq* other);
  friend void swap(AddReq& a, AddReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddReq* New() const final {
    return CreateMaybeMessage<AddReq>(NULL);
  }

  AddReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddReq& from);
  void MergeFrom(const AddReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 A = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 B = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.AddReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.AddRsp) */ {
 public:
  AddRsp();
  virtual ~AddRsp();

  AddRsp(const AddRsp& from);

  inline AddRsp& operator=(const AddRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRsp(AddRsp&& from) noexcept
    : AddRsp() {
    *this = ::std::move(from);
  }

  inline AddRsp& operator=(AddRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRsp* internal_default_instance() {
    return reinterpret_cast<const AddRsp*>(
               &_AddRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddRsp* other);
  friend void swap(AddRsp& a, AddRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRsp* New() const final {
    return CreateMaybeMessage<AddRsp>(NULL);
  }

  AddRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRsp& from);
  void MergeFrom(const AddRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 A = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 B = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // int32 Result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.AddRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerLoginReq) */ {
 public:
  PlayerLoginReq();
  virtual ~PlayerLoginReq();

  PlayerLoginReq(const PlayerLoginReq& from);

  inline PlayerLoginReq& operator=(const PlayerLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerLoginReq(PlayerLoginReq&& from) noexcept
    : PlayerLoginReq() {
    *this = ::std::move(from);
  }

  inline PlayerLoginReq& operator=(PlayerLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginReq* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginReq*>(
               &_PlayerLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayerLoginReq* other);
  friend void swap(PlayerLoginReq& a, PlayerLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginReq* New() const final {
    return CreateMaybeMessage<PlayerLoginReq>(NULL);
  }

  PlayerLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerLoginReq& from);
  void MergeFrom(const PlayerLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSaveData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSaveData) */ {
 public:
  PlayerSaveData();
  virtual ~PlayerSaveData();

  PlayerSaveData(const PlayerSaveData& from);

  inline PlayerSaveData& operator=(const PlayerSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSaveData(PlayerSaveData&& from) noexcept
    : PlayerSaveData() {
    *this = ::std::move(from);
  }

  inline PlayerSaveData& operator=(PlayerSaveData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSaveData* internal_default_instance() {
    return reinterpret_cast<const PlayerSaveData*>(
               &_PlayerSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PlayerSaveData* other);
  friend void swap(PlayerSaveData& a, PlayerSaveData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSaveData* New() const final {
    return CreateMaybeMessage<PlayerSaveData>(NULL);
  }

  PlayerSaveData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSaveData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSaveData& from);
  void MergeFrom(const PlayerSaveData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSaveData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSaveData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSyncData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSyncData) */ {
 public:
  PlayerSyncData();
  virtual ~PlayerSyncData();

  PlayerSyncData(const PlayerSyncData& from);

  inline PlayerSyncData& operator=(const PlayerSyncData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSyncData(PlayerSyncData&& from) noexcept
    : PlayerSyncData() {
    *this = ::std::move(from);
  }

  inline PlayerSyncData& operator=(PlayerSyncData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSyncData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSyncData* internal_default_instance() {
    return reinterpret_cast<const PlayerSyncData*>(
               &_PlayerSyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlayerSyncData* other);
  friend void swap(PlayerSyncData& a, PlayerSyncData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSyncData* New() const final {
    return CreateMaybeMessage<PlayerSyncData>(NULL);
  }

  PlayerSyncData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSyncData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSyncData& from);
  void MergeFrom(const PlayerSyncData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSyncData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSyncData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerLoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerLoginRsp) */ {
 public:
  PlayerLoginRsp();
  virtual ~PlayerLoginRsp();

  PlayerLoginRsp(const PlayerLoginRsp& from);

  inline PlayerLoginRsp& operator=(const PlayerLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerLoginRsp(PlayerLoginRsp&& from) noexcept
    : PlayerLoginRsp() {
    *this = ::std::move(from);
  }

  inline PlayerLoginRsp& operator=(PlayerLoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginRsp*>(
               &_PlayerLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PlayerLoginRsp* other);
  friend void swap(PlayerLoginRsp& a, PlayerLoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginRsp* New() const final {
    return CreateMaybeMessage<PlayerLoginRsp>(NULL);
  }

  PlayerLoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerLoginRsp& from);
  void MergeFrom(const PlayerLoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .TCCamp.PlayerSyncData PlayerData = 3;
  bool has_playerdata() const;
  void clear_playerdata();
  static const int kPlayerDataFieldNumber = 3;
  private:
  const ::TCCamp::PlayerSyncData& _internal_playerdata() const;
  public:
  const ::TCCamp::PlayerSyncData& playerdata() const;
  ::TCCamp::PlayerSyncData* release_playerdata();
  ::TCCamp::PlayerSyncData* mutable_playerdata();
  void set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerLoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::TCCamp::PlayerSyncData* playerdata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerCreateReq) */ {
 public:
  PlayerCreateReq();
  virtual ~PlayerCreateReq();

  PlayerCreateReq(const PlayerCreateReq& from);

  inline PlayerCreateReq& operator=(const PlayerCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateReq(PlayerCreateReq&& from) noexcept
    : PlayerCreateReq() {
    *this = ::std::move(from);
  }

  inline PlayerCreateReq& operator=(PlayerCreateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateReq* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateReq*>(
               &_PlayerCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PlayerCreateReq* other);
  friend void swap(PlayerCreateReq& a, PlayerCreateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateReq* New() const final {
    return CreateMaybeMessage<PlayerCreateReq>(NULL);
  }

  PlayerCreateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateReq& from);
  void MergeFrom(const PlayerCreateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerCreateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerCreateRsp) */ {
 public:
  PlayerCreateRsp();
  virtual ~PlayerCreateRsp();

  PlayerCreateRsp(const PlayerCreateRsp& from);

  inline PlayerCreateRsp& operator=(const PlayerCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateRsp(PlayerCreateRsp&& from) noexcept
    : PlayerCreateRsp() {
    *this = ::std::move(from);
  }

  inline PlayerCreateRsp& operator=(PlayerCreateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateRsp*>(
               &_PlayerCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PlayerCreateRsp* other);
  friend void swap(PlayerCreateRsp& a, PlayerCreateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateRsp* New() const final {
    return CreateMaybeMessage<PlayerCreateRsp>(NULL);
  }

  PlayerCreateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateRsp& from);
  void MergeFrom(const PlayerCreateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 2;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerCreateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncAnnounce : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SyncAnnounce) */ {
 public:
  SyncAnnounce();
  virtual ~SyncAnnounce();

  SyncAnnounce(const SyncAnnounce& from);

  inline SyncAnnounce& operator=(const SyncAnnounce& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncAnnounce(SyncAnnounce&& from) noexcept
    : SyncAnnounce() {
    *this = ::std::move(from);
  }

  inline SyncAnnounce& operator=(SyncAnnounce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncAnnounce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncAnnounce* internal_default_instance() {
    return reinterpret_cast<const SyncAnnounce*>(
               &_SyncAnnounce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SyncAnnounce* other);
  friend void swap(SyncAnnounce& a, SyncAnnounce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncAnnounce* New() const final {
    return CreateMaybeMessage<SyncAnnounce>(NULL);
  }

  SyncAnnounce* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncAnnounce>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncAnnounce& from);
  void MergeFrom(const SyncAnnounce& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncAnnounce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Announce = 1;
  void clear_announce();
  static const int kAnnounceFieldNumber = 1;
  const ::std::string& announce() const;
  void set_announce(const ::std::string& value);
  #if LANG_CXX11
  void set_announce(::std::string&& value);
  #endif
  void set_announce(const char* value);
  void set_announce(const void* value, size_t size);
  ::std::string* mutable_announce();
  ::std::string* release_announce();
  void set_allocated_announce(::std::string* announce);

  // @@protoc_insertion_point(class_scope:TCCamp.SyncAnnounce)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr announce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Float3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.Float3) */ {
 public:
  Float3();
  virtual ~Float3();

  Float3(const Float3& from);

  inline Float3& operator=(const Float3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Float3(Float3&& from) noexcept
    : Float3() {
    *this = ::std::move(from);
  }

  inline Float3& operator=(Float3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Float3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Float3* internal_default_instance() {
    return reinterpret_cast<const Float3*>(
               &_Float3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Float3* other);
  friend void swap(Float3& a, Float3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Float3* New() const final {
    return CreateMaybeMessage<Float3>(NULL);
  }

  Float3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Float3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Float3& from);
  void MergeFrom(const Float3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.Float3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Float4 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.Float4) */ {
 public:
  Float4();
  virtual ~Float4();

  Float4(const Float4& from);

  inline Float4& operator=(const Float4& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Float4(Float4&& from) noexcept
    : Float4() {
    *this = ::std::move(from);
  }

  inline Float4& operator=(Float4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Float4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Float4* internal_default_instance() {
    return reinterpret_cast<const Float4*>(
               &_Float4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Float4* other);
  friend void swap(Float4& a, Float4& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Float4* New() const final {
    return CreateMaybeMessage<Float4>(NULL);
  }

  Float4* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Float4>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Float4& from);
  void MergeFrom(const Float4& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Float4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // float w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.Float4)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSyncInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSyncInfo) */ {
 public:
  PlayerSyncInfo();
  virtual ~PlayerSyncInfo();

  PlayerSyncInfo(const PlayerSyncInfo& from);

  inline PlayerSyncInfo& operator=(const PlayerSyncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSyncInfo(PlayerSyncInfo&& from) noexcept
    : PlayerSyncInfo() {
    *this = ::std::move(from);
  }

  inline PlayerSyncInfo& operator=(PlayerSyncInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSyncInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSyncInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerSyncInfo*>(
               &_PlayerSyncInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PlayerSyncInfo* other);
  friend void swap(PlayerSyncInfo& a, PlayerSyncInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSyncInfo* New() const final {
    return CreateMaybeMessage<PlayerSyncInfo>(NULL);
  }

  PlayerSyncInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSyncInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSyncInfo& from);
  void MergeFrom(const PlayerSyncInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSyncInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Float3 Position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::TCCamp::Float3& _internal_position() const;
  public:
  const ::TCCamp::Float3& position() const;
  ::TCCamp::Float3* release_position();
  ::TCCamp::Float3* mutable_position();
  void set_allocated_position(::TCCamp::Float3* position);

  // .TCCamp.Float4 Rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  private:
  const ::TCCamp::Float4& _internal_rotation() const;
  public:
  const ::TCCamp::Float4& rotation() const;
  ::TCCamp::Float4* release_rotation();
  ::TCCamp::Float4* mutable_rotation();
  void set_allocated_rotation(::TCCamp::Float4* rotation);

  // float Speed = 3;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  float speed() const;
  void set_speed(float value);

  // int32 UID = 4;
  void clear_uid();
  static const int kUIDFieldNumber = 4;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSyncInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Float3* position_;
  ::TCCamp::Float4* rotation_;
  float speed_;
  ::google::protobuf::int32 uid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerSyncInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ServerSyncInfo) */ {
 public:
  ServerSyncInfo();
  virtual ~ServerSyncInfo();

  ServerSyncInfo(const ServerSyncInfo& from);

  inline ServerSyncInfo& operator=(const ServerSyncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerSyncInfo(ServerSyncInfo&& from) noexcept
    : ServerSyncInfo() {
    *this = ::std::move(from);
  }

  inline ServerSyncInfo& operator=(ServerSyncInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerSyncInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerSyncInfo* internal_default_instance() {
    return reinterpret_cast<const ServerSyncInfo*>(
               &_ServerSyncInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ServerSyncInfo* other);
  friend void swap(ServerSyncInfo& a, ServerSyncInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerSyncInfo* New() const final {
    return CreateMaybeMessage<ServerSyncInfo>(NULL);
  }

  ServerSyncInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerSyncInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerSyncInfo& from);
  void MergeFrom(const ServerSyncInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerSyncInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.PlayerSyncInfo PlayerSyncInfoArray = 1;
  int playersyncinfoarray_size() const;
  void clear_playersyncinfoarray();
  static const int kPlayerSyncInfoArrayFieldNumber = 1;
  ::TCCamp::PlayerSyncInfo* mutable_playersyncinfoarray(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::PlayerSyncInfo >*
      mutable_playersyncinfoarray();
  const ::TCCamp::PlayerSyncInfo& playersyncinfoarray(int index) const;
  ::TCCamp::PlayerSyncInfo* add_playersyncinfoarray();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::PlayerSyncInfo >&
      playersyncinfoarray() const;

  // @@protoc_insertion_point(class_scope:TCCamp.ServerSyncInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::PlayerSyncInfo > playersyncinfoarray_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddReq

// int32 A = 1;
inline void AddReq::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 AddReq::a() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddReq.A)
  return a_;
}
inline void AddReq::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddReq.A)
}

// int32 B = 2;
inline void AddReq::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 AddReq::b() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddReq.B)
  return b_;
}
inline void AddReq::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddReq.B)
}

// -------------------------------------------------------------------

// AddRsp

// int32 A = 1;
inline void AddRsp::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 AddRsp::a() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.A)
  return a_;
}
inline void AddRsp::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.A)
}

// int32 B = 2;
inline void AddRsp::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 AddRsp::b() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.B)
  return b_;
}
inline void AddRsp::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.B)
}

// int32 Result = 3;
inline void AddRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 AddRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.Result)
  return result_;
}
inline void AddRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.Result)
}

// -------------------------------------------------------------------

// PlayerLoginReq

// string PlayerID = 1;
inline void PlayerLoginReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerLoginReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerLoginReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginReq.PlayerID)
}
#endif
inline void PlayerLoginReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginReq.PlayerID)
}
inline void PlayerLoginReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginReq.PlayerID)
}
inline ::std::string* PlayerLoginReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginReq.PlayerID)
}

// string Password = 2;
inline void PlayerLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginReq::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginReq.Password)
  return password_.GetNoArena();
}
inline void PlayerLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginReq.Password)
}
#if LANG_CXX11
inline void PlayerLoginReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginReq.Password)
}
#endif
inline void PlayerLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginReq.Password)
}
inline void PlayerLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginReq.Password)
}
inline ::std::string* PlayerLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginReq.Password)
}

// -------------------------------------------------------------------

// PlayerSaveData

// string PlayerID = 1;
inline void PlayerSaveData::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerSaveData::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.PlayerID)
}
#if LANG_CXX11
inline void PlayerSaveData::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.PlayerID)
}
#endif
inline void PlayerSaveData::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.PlayerID)
}
inline void PlayerSaveData::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.PlayerID)
}
inline ::std::string* PlayerSaveData::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.PlayerID)
}

// string Password = 2;
inline void PlayerSaveData::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.Password)
  return password_.GetNoArena();
}
inline void PlayerSaveData::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.Password)
}
#if LANG_CXX11
inline void PlayerSaveData::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.Password)
}
#endif
inline void PlayerSaveData::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.Password)
}
inline void PlayerSaveData::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.Password)
}
inline ::std::string* PlayerSaveData::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.Password)
}

// bytes Name = 3;
inline void PlayerSaveData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.Name)
  return name_.GetNoArena();
}
inline void PlayerSaveData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.Name)
}
#if LANG_CXX11
inline void PlayerSaveData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.Name)
}
#endif
inline void PlayerSaveData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.Name)
}
inline void PlayerSaveData::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.Name)
}
inline ::std::string* PlayerSaveData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.Name)
}

// -------------------------------------------------------------------

// PlayerSyncData

// bytes Name = 1;
inline void PlayerSyncData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSyncData::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.Name)
  return name_.GetNoArena();
}
inline void PlayerSyncData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.Name)
}
#if LANG_CXX11
inline void PlayerSyncData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSyncData.Name)
}
#endif
inline void PlayerSyncData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSyncData.Name)
}
inline void PlayerSyncData::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSyncData.Name)
}
inline ::std::string* PlayerSyncData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSyncData::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSyncData.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSyncData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSyncData.Name)
}

// -------------------------------------------------------------------

// PlayerLoginRsp

// int32 Result = 1;
inline void PlayerLoginRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerLoginRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.Result)
  return result_;
}
inline void PlayerLoginRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginRsp.Result)
}

// string Reason = 2;
inline void PlayerLoginRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerLoginRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginRsp.Reason)
}
#if LANG_CXX11
inline void PlayerLoginRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginRsp.Reason)
}
#endif
inline void PlayerLoginRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginRsp.Reason)
}
inline void PlayerLoginRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginRsp.Reason)
}
inline ::std::string* PlayerLoginRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginRsp.Reason)
}

// .TCCamp.PlayerSyncData PlayerData = 3;
inline bool PlayerLoginRsp::has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != NULL;
}
inline void PlayerLoginRsp::clear_playerdata() {
  if (GetArenaNoVirtual() == NULL && playerdata_ != NULL) {
    delete playerdata_;
  }
  playerdata_ = NULL;
}
inline const ::TCCamp::PlayerSyncData& PlayerLoginRsp::_internal_playerdata() const {
  return *playerdata_;
}
inline const ::TCCamp::PlayerSyncData& PlayerLoginRsp::playerdata() const {
  const ::TCCamp::PlayerSyncData* p = playerdata_;
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.PlayerData)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::PlayerSyncData*>(
      &::TCCamp::_PlayerSyncData_default_instance_);
}
inline ::TCCamp::PlayerSyncData* PlayerLoginRsp::release_playerdata() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginRsp.PlayerData)
  
  ::TCCamp::PlayerSyncData* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}
inline ::TCCamp::PlayerSyncData* PlayerLoginRsp::mutable_playerdata() {
  
  if (playerdata_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::PlayerSyncData>(GetArenaNoVirtual());
    playerdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginRsp.PlayerData)
  return playerdata_;
}
inline void PlayerLoginRsp::set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerdata_;
  }
  if (playerdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginRsp.PlayerData)
}

// -------------------------------------------------------------------

// PlayerCreateReq

// string PlayerID = 1;
inline void PlayerCreateReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.PlayerID)
}
#endif
inline void PlayerCreateReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.PlayerID)
}
inline void PlayerCreateReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.PlayerID)
}
inline ::std::string* PlayerCreateReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.PlayerID)
}

// string Password = 2;
inline void PlayerCreateReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.Password)
  return password_.GetNoArena();
}
inline void PlayerCreateReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.Password)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.Password)
}
#endif
inline void PlayerCreateReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.Password)
}
inline void PlayerCreateReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.Password)
}
inline ::std::string* PlayerCreateReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.Password)
}

// bytes Name = 3;
inline void PlayerCreateReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.Name)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.Name)
}
#endif
inline void PlayerCreateReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.Name)
}
inline void PlayerCreateReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.Name)
}
inline ::std::string* PlayerCreateReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.Name)
}

// -------------------------------------------------------------------

// PlayerCreateRsp

// int32 Result = 1;
inline void PlayerCreateRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerCreateRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Result)
  return result_;
}
inline void PlayerCreateRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Result)
}

// string PlayerID = 2;
inline void PlayerCreateRsp::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateRsp::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.PlayerID)
}
#endif
inline void PlayerCreateRsp::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.PlayerID)
}
inline void PlayerCreateRsp::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.PlayerID)
}
inline ::std::string* PlayerCreateRsp::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.PlayerID)
}

// bytes Name = 3;
inline void PlayerCreateRsp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateRsp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Name)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.Name)
}
#endif
inline void PlayerCreateRsp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.Name)
}
inline void PlayerCreateRsp::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.Name)
}
inline ::std::string* PlayerCreateRsp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.Name)
}

// string Reason = 4;
inline void PlayerCreateRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerCreateRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Reason)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.Reason)
}
#endif
inline void PlayerCreateRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.Reason)
}
inline void PlayerCreateRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.Reason)
}
inline ::std::string* PlayerCreateRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.Reason)
}

// -------------------------------------------------------------------

// SyncAnnounce

// bytes Announce = 1;
inline void SyncAnnounce::clear_announce() {
  announce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncAnnounce::announce() const {
  // @@protoc_insertion_point(field_get:TCCamp.SyncAnnounce.Announce)
  return announce_.GetNoArena();
}
inline void SyncAnnounce::set_announce(const ::std::string& value) {
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.SyncAnnounce.Announce)
}
#if LANG_CXX11
inline void SyncAnnounce::set_announce(::std::string&& value) {
  
  announce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.SyncAnnounce.Announce)
}
#endif
inline void SyncAnnounce::set_announce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.SyncAnnounce.Announce)
}
inline void SyncAnnounce::set_announce(const void* value, size_t size) {
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.SyncAnnounce.Announce)
}
inline ::std::string* SyncAnnounce::mutable_announce() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.SyncAnnounce.Announce)
  return announce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncAnnounce::release_announce() {
  // @@protoc_insertion_point(field_release:TCCamp.SyncAnnounce.Announce)
  
  return announce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncAnnounce::set_allocated_announce(::std::string* announce) {
  if (announce != NULL) {
    
  } else {
    
  }
  announce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announce);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.SyncAnnounce.Announce)
}

// -------------------------------------------------------------------

// Float3

// float x = 1;
inline void Float3::clear_x() {
  x_ = 0;
}
inline float Float3::x() const {
  // @@protoc_insertion_point(field_get:TCCamp.Float3.x)
  return x_;
}
inline void Float3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Float3.x)
}

// float y = 2;
inline void Float3::clear_y() {
  y_ = 0;
}
inline float Float3::y() const {
  // @@protoc_insertion_point(field_get:TCCamp.Float3.y)
  return y_;
}
inline void Float3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Float3.y)
}

// float z = 3;
inline void Float3::clear_z() {
  z_ = 0;
}
inline float Float3::z() const {
  // @@protoc_insertion_point(field_get:TCCamp.Float3.z)
  return z_;
}
inline void Float3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Float3.z)
}

// -------------------------------------------------------------------

// Float4

// float x = 1;
inline void Float4::clear_x() {
  x_ = 0;
}
inline float Float4::x() const {
  // @@protoc_insertion_point(field_get:TCCamp.Float4.x)
  return x_;
}
inline void Float4::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Float4.x)
}

// float y = 2;
inline void Float4::clear_y() {
  y_ = 0;
}
inline float Float4::y() const {
  // @@protoc_insertion_point(field_get:TCCamp.Float4.y)
  return y_;
}
inline void Float4::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Float4.y)
}

// float z = 3;
inline void Float4::clear_z() {
  z_ = 0;
}
inline float Float4::z() const {
  // @@protoc_insertion_point(field_get:TCCamp.Float4.z)
  return z_;
}
inline void Float4::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Float4.z)
}

// float w = 4;
inline void Float4::clear_w() {
  w_ = 0;
}
inline float Float4::w() const {
  // @@protoc_insertion_point(field_get:TCCamp.Float4.w)
  return w_;
}
inline void Float4::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Float4.w)
}

// -------------------------------------------------------------------

// PlayerSyncInfo

// .TCCamp.Float3 Position = 1;
inline bool PlayerSyncInfo::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void PlayerSyncInfo::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::TCCamp::Float3& PlayerSyncInfo::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Float3& PlayerSyncInfo::position() const {
  const ::TCCamp::Float3* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncInfo.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Float3*>(
      &::TCCamp::_Float3_default_instance_);
}
inline ::TCCamp::Float3* PlayerSyncInfo::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSyncInfo.Position)
  
  ::TCCamp::Float3* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Float3* PlayerSyncInfo::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Float3>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncInfo.Position)
  return position_;
}
inline void PlayerSyncInfo::set_allocated_position(::TCCamp::Float3* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSyncInfo.Position)
}

// .TCCamp.Float4 Rotation = 2;
inline bool PlayerSyncInfo::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void PlayerSyncInfo::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::TCCamp::Float4& PlayerSyncInfo::_internal_rotation() const {
  return *rotation_;
}
inline const ::TCCamp::Float4& PlayerSyncInfo::rotation() const {
  const ::TCCamp::Float4* p = rotation_;
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncInfo.Rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Float4*>(
      &::TCCamp::_Float4_default_instance_);
}
inline ::TCCamp::Float4* PlayerSyncInfo::release_rotation() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSyncInfo.Rotation)
  
  ::TCCamp::Float4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::TCCamp::Float4* PlayerSyncInfo::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Float4>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncInfo.Rotation)
  return rotation_;
}
inline void PlayerSyncInfo::set_allocated_rotation(::TCCamp::Float4* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSyncInfo.Rotation)
}

// float Speed = 3;
inline void PlayerSyncInfo::clear_speed() {
  speed_ = 0;
}
inline float PlayerSyncInfo::speed() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncInfo.Speed)
  return speed_;
}
inline void PlayerSyncInfo::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncInfo.Speed)
}

// int32 UID = 4;
inline void PlayerSyncInfo::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 PlayerSyncInfo::uid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncInfo.UID)
  return uid_;
}
inline void PlayerSyncInfo::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncInfo.UID)
}

// -------------------------------------------------------------------

// ServerSyncInfo

// repeated .TCCamp.PlayerSyncInfo PlayerSyncInfoArray = 1;
inline int ServerSyncInfo::playersyncinfoarray_size() const {
  return playersyncinfoarray_.size();
}
inline void ServerSyncInfo::clear_playersyncinfoarray() {
  playersyncinfoarray_.Clear();
}
inline ::TCCamp::PlayerSyncInfo* ServerSyncInfo::mutable_playersyncinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.ServerSyncInfo.PlayerSyncInfoArray)
  return playersyncinfoarray_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::PlayerSyncInfo >*
ServerSyncInfo::mutable_playersyncinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.ServerSyncInfo.PlayerSyncInfoArray)
  return &playersyncinfoarray_;
}
inline const ::TCCamp::PlayerSyncInfo& ServerSyncInfo::playersyncinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.ServerSyncInfo.PlayerSyncInfoArray)
  return playersyncinfoarray_.Get(index);
}
inline ::TCCamp::PlayerSyncInfo* ServerSyncInfo::add_playersyncinfoarray() {
  // @@protoc_insertion_point(field_add:TCCamp.ServerSyncInfo.PlayerSyncInfoArray)
  return playersyncinfoarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::PlayerSyncInfo >&
ServerSyncInfo::playersyncinfoarray() const {
  // @@protoc_insertion_point(field_list:TCCamp.ServerSyncInfo.PlayerSyncInfoArray)
  return playersyncinfoarray_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCCamp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TCCamp::CLIENT_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::CLIENT_CMD>() {
  return ::TCCamp::CLIENT_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::SERVER_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::SERVER_CMD>() {
  return ::TCCamp::SERVER_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_player_2eproto
