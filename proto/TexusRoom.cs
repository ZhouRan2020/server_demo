// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: texus_room.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Texus {

  /// <summary>Holder for reflection information generated from texus_room.proto</summary>
  public static partial class TexusRoomReflection {

    #region Descriptor
    /// <summary>File descriptor for texus_room.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TexusRoomReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChB0ZXh1c19yb29tLnByb3RvEgVUZXh1cyI1Cg1TZWF0VGFibGVJdGVtEhAK",
            "CFBsYXllcklEGAEgASgJEhIKClNlYXROdW1iZXIYAiABKAUiIgoEQ2FyZBIM",
            "CgRzdWl0GAEgASgFEgwKBHJhbmsYAiABKAUiMQoNUGxheWVyVHJ5Sm9pbhIQ",
            "CghQbGF5ZXJJRBgBIAEoCRIOCgZSb29tSUQYAiABKAUigAEKEFBsYXllckpv",
            "aW5SZXN1bHQSEAoIUGxheWVySUQYASABKAkSDgoGUm9vbUlEGAIgASgFEhIK",
            "CkpvaW5SZXN1bHQYAyABKAUSJwoJU2VhdFRhYmxlGAQgAygLMhQuVGV4dXMu",
            "U2VhdFRhYmxlSXRlbRINCgVtb25leRgFIAEoBSI1ChFQbGF5ZXJUcnlRdWl0",
            "Um9vbRIQCghQbGF5ZXJJRBgBIAEoCRIOCgZSb29tSUQYAiABKAUihAEKFFBs",
            "YXllclF1aXRSb29tUmVzdWx0EhAKCFBsYXllcklEGAEgASgJEg4KBlJvb21J",
            "RBgCIAEoBRISCgpRdWl0UmVzdWx0GAMgASgFEicKCVNlYXRUYWJsZRgEIAMo",
            "CzIULlRleHVzLlNlYXRUYWJsZUl0ZW0SDQoFbW9uZXkYBSABKAUiPQoSQnJv",
            "YWRjYXN0U2VhdFRhYmxlEicKCVNlYXRUYWJsZRgBIAMoCzIULlRleHVzLlNl",
            "YXRUYWJsZUl0ZW0iLQoJR2FtZVN0YXJ0EhAKCFBsYXllcklEGAEgASgJEg4K",
            "BlJvb21JRBgCIAEoBSJnCg9HYW1lU3RhcnRSZXN1bHQSEAoIUGxheWVySUQY",
            "ASABKAkSDgoGUm9vbUlEGAIgASgFEhcKD0dhbWVTdGFydFJlc3VsdBgDIAEo",
            "BRIZCgRob2xlGAUgAygLMgsuVGV4dXMuQ2FyZCIpCgNHZXQSEAoIUGxheWVy",
            "SUQYASABKAkSEAoIUGFzc3dvcmQYAiABKAkiHgoOUGxheWVyU3luY0RhdGES",
            "DAoETmFtZRgBIAEoDCJDCg9QbGF5ZXJDcmVhdGVSZXESEAoIUGxheWVySUQY",
            "ASABKAkSEAoIUGFzc3dvcmQYAiABKAkSDAoETmFtZRgDIAEoDCJRCg9QbGF5",
            "ZXJDcmVhdGVSc3ASDgoGUmVzdWx0GAEgASgFEhAKCFBsYXllcklEGAIgASgJ",
            "EgwKBE5hbWUYAyABKAwSDgoGUmVhc29uGAQgASgJKoUCCgpDTElFTlRfQ01E",
            "EhYKEkNMSUVOVF9DTURfSU5WQUxJRBAAEhYKEENMSUVOVF9DTURfQkVHSU4Q",
            "sOoBEhEKC0NMSUVOVF9QSU5HELHqARIWChBDTElFTlRfTE9HSU5fUkVRELTq",
            "ARIXChFDTElFTlRfQ1JFQVRFX1JFURC16gESGQoTQ0xJRU5UX0FOTk9VTkNF",
            "X1JFURC26gESGgoUQ0xJRU5UX0pPSU5fUk9PTV9SRVEQt+oBEhoKFENMSUVO",
            "VF9RVUlUX1JPT01fUkVRELjqARIaChRDTElFTlRfR0FNRVNUQVJUX1JFURC5",
            "6gESFAoOQ0xJRU5UX0NNRF9FTkQQ6IECKrICCgpTRVJWRVJfQ01EEhYKElNF",
            "UlZFUl9DTURfSU5WQUxJRBAAEhUKEFNFUlZFUl9DTURfQkVHSU4Q6AcSEAoL",
            "U0VSVkVSX1BPTkcQ6QcSFQoQU0VSVkVSX0xPR0lOX1JTUBDsBxIWChFTRVJW",
            "RVJfQ1JFQVRFX1JTUBDtBxIYChNTRVJWRVJfQU5OT1VOQ0VfUlNQEO4HEhoK",
            "FVNFUlZFUl9KVURHRV9KT0lOX1JTUBDvBxIYChNTRVJWRVJfUVVJVFJPT01f",
            "UlNQEPAHEh8KGlNFUlZFUl9CUk9BRENBU1RfU0VBVFRBQkxFEPEHEhkKFFNF",
            "UlZFUl9HQU1FU1RBUlRfUlNQEPIHEhMKDkdNX09QRVJBVEVfUlNQEMwIEhMK",
            "DlNFUlZFUl9DTURfRU5EEJBOKpQGChFQUk9UT19SRVNVTFRfQ09ERRIaChZT",
            "RVJWRVJfTE9HSU5fUkVTVUxUX09LEAASHAoYU0VSVkVSX0xPR0lOX1JFU1VM",
            "VF9GQUlMEAESNAonU0VSVkVSX0xPR0lOX1JFU1VMVF9GQUlMX05PX1NVQ0hf",
            "UExBWUVSEP7//////////wESLAooU0VSVkVSX0xPR0lOX1JFU1VMVF9GQUlM",
            "X0FMUkVBRFlfSU5fR0FNRRADEiIKHlNFUlZFUl9MT0dJTl9SRVNVTFRfRkFJ",
            "TF9XUk9ORxAEEhYKEkpPSU5ST09NX1JFU1VMVF9PSxAFEi8KK0pPSU5ST09N",
            "X1JFU1VMVF9GQUlMX0VYSVNUSU5HX1BMQVlFUl9JTlJPT00QBhIlCiFKT0lO",
            "Uk9PTV9SRVNVTFRfRkFJTF9OT19TVUNIX1JPT00QBxIlCiFKT0lOUk9PTV9S",
            "RVNVTFRfRkFJTF9CQURfUExBWUVSSUQQCBItCilKT0lOUk9PTV9SRVNVTFRf",
            "RkFJTF9QTEFZRVJfQU1PVU5UX0VYQ0VFRBAJEigKJEpPSU5ST09NX1JFU1VM",
            "VF9GQUlMX05PX0VOT1VHSF9NT05FWRAKEi0KKUpPSU5ST09NX1JFU1VMVF9G",
            "QUlMX1JPT01fQUxSRUFEWV9JTl9HQU1FEAsSFgoSUVVJVFJPT01fUkVTVUxU",
            "X09LEA8SGAoUUVVJVFJPT01fUkVTVUxUX0ZBSUwQEBIlCiFRVUlUUk9PTV9S",
            "RVNVTFRfRkFJTF9OT19TVUNIX1JPT00QERIjCh9RVUlUUk9PTV9SRVNVTFRf",
            "RkFJTF9JTlZBTElEX0lEEBISEAoMR0FNRVNUQVJUX09LEBMSHwobR0FNRVNU",
            "QVJUX0ZBSUxfTk9fU1VDSF9ST09NEBQSIQodR0FNRVNUQVJUX0ZBSUxfTk9U",
            "X1JPT01fT1dORVIQFRIhCh1HQU1FU1RBUlRfRkFJTF9OT19FTk9VR0hfVVNF",
            "UhAWEicKI0dBTUVTVEFSVF9GQUlMX1JPT01fQUxSRUFEWV9JTl9HQU1FEBdi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Texus.CLIENT_CMD), typeof(global::Texus.SERVER_CMD), typeof(global::Texus.PROTO_RESULT_CODE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.SeatTableItem), global::Texus.SeatTableItem.Parser, new[]{ "PlayerID", "SeatNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.Card), global::Texus.Card.Parser, new[]{ "Suit", "Rank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.PlayerTryJoin), global::Texus.PlayerTryJoin.Parser, new[]{ "PlayerID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.PlayerJoinResult), global::Texus.PlayerJoinResult.Parser, new[]{ "PlayerID", "RoomID", "JoinResult", "SeatTable", "Money" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.PlayerTryQuitRoom), global::Texus.PlayerTryQuitRoom.Parser, new[]{ "PlayerID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.PlayerQuitRoomResult), global::Texus.PlayerQuitRoomResult.Parser, new[]{ "PlayerID", "RoomID", "QuitResult", "SeatTable", "Money" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.BroadcastSeatTable), global::Texus.BroadcastSeatTable.Parser, new[]{ "SeatTable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.GameStart), global::Texus.GameStart.Parser, new[]{ "PlayerID", "RoomID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.GameStartResult), global::Texus.GameStartResult.Parser, new[]{ "PlayerID", "RoomID", "GameStartResult_", "Hole" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.Get), global::Texus.Get.Parser, new[]{ "PlayerID", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.PlayerSyncData), global::Texus.PlayerSyncData.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.PlayerCreateReq), global::Texus.PlayerCreateReq.Parser, new[]{ "PlayerID", "Password", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Texus.PlayerCreateRsp), global::Texus.PlayerCreateRsp.Parser, new[]{ "Result", "PlayerID", "Name", "Reason" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CLIENT_CMD {
    [pbr::OriginalName("CLIENT_CMD_INVALID")] Invalid = 0,
    [pbr::OriginalName("CLIENT_CMD_BEGIN")] Begin = 30000,
    [pbr::OriginalName("CLIENT_PING")] ClientPing = 30001,
    [pbr::OriginalName("CLIENT_LOGIN_REQ")] ClientLoginReq = 30004,
    [pbr::OriginalName("CLIENT_CREATE_REQ")] ClientCreateReq = 30005,
    [pbr::OriginalName("CLIENT_ANNOUNCE_REQ")] ClientAnnounceReq = 30006,
    /// <summary>
    ///客户端请求加入特定房间的请求
    /// </summary>
    [pbr::OriginalName("CLIENT_JOIN_ROOM_REQ")] ClientJoinRoomReq = 30007,
    /// <summary>
    ///客户端请求退出房间的请求
    /// </summary>
    [pbr::OriginalName("CLIENT_QUIT_ROOM_REQ")] ClientQuitRoomReq = 30008,
    [pbr::OriginalName("CLIENT_GAMESTART_REQ")] ClientGamestartReq = 30009,
    [pbr::OriginalName("CLIENT_CMD_END")] End = 33000,
  }

  public enum SERVER_CMD {
    [pbr::OriginalName("SERVER_CMD_INVALID")] Invalid = 0,
    [pbr::OriginalName("SERVER_CMD_BEGIN")] Begin = 1000,
    [pbr::OriginalName("SERVER_PONG")] ServerPong = 1001,
    [pbr::OriginalName("SERVER_LOGIN_RSP")] ServerLoginRsp = 1004,
    [pbr::OriginalName("SERVER_CREATE_RSP")] ServerCreateRsp = 1005,
    [pbr::OriginalName("SERVER_ANNOUNCE_RSP")] ServerAnnounceRsp = 1006,
    /// <summary>
    ///服务端仲裁是否允许客户加入特定房间的仲裁结果反馈
    /// </summary>
    [pbr::OriginalName("SERVER_JUDGE_JOIN_RSP")] ServerJudgeJoinRsp = 1007,
    /// <summary>
    ///服务端反馈退出房间结果的告知
    /// </summary>
    [pbr::OriginalName("SERVER_QUITROOM_RSP")] ServerQuitroomRsp = 1008,
    [pbr::OriginalName("SERVER_BROADCAST_SEATTABLE")] ServerBroadcastSeattable = 1009,
    /// <summary>
    ///SERVER_BROADCAST_GAMESTART = 1011;
    /// </summary>
    [pbr::OriginalName("SERVER_GAMESTART_RSP")] ServerGamestartRsp = 1010,
    [pbr::OriginalName("GM_OPERATE_RSP")] GmOperateRsp = 1100,
    [pbr::OriginalName("SERVER_CMD_END")] End = 10000,
  }

  public enum PROTO_RESULT_CODE {
    [pbr::OriginalName("SERVER_LOGIN_RESULT_OK")] ServerLoginResultOk = 0,
    [pbr::OriginalName("SERVER_LOGIN_RESULT_FAIL")] ServerLoginResultFail = 1,
    [pbr::OriginalName("SERVER_LOGIN_RESULT_FAIL_NO_SUCH_PLAYER")] ServerLoginResultFailNoSuchPlayer = -2,
    [pbr::OriginalName("SERVER_LOGIN_RESULT_FAIL_ALREADY_IN_GAME")] ServerLoginResultFailAlreadyInGame = 3,
    [pbr::OriginalName("SERVER_LOGIN_RESULT_FAIL_WRONG")] ServerLoginResultFailWrong = 4,
    [pbr::OriginalName("JOINROOM_RESULT_OK")] JoinroomResultOk = 5,
    [pbr::OriginalName("JOINROOM_RESULT_FAIL_EXISTING_PLAYER_INROOM")] JoinroomResultFailExistingPlayerInroom = 6,
    [pbr::OriginalName("JOINROOM_RESULT_FAIL_NO_SUCH_ROOM")] JoinroomResultFailNoSuchRoom = 7,
    [pbr::OriginalName("JOINROOM_RESULT_FAIL_BAD_PLAYERID")] JoinroomResultFailBadPlayerid = 8,
    [pbr::OriginalName("JOINROOM_RESULT_FAIL_PLAYER_AMOUNT_EXCEED")] JoinroomResultFailPlayerAmountExceed = 9,
    [pbr::OriginalName("JOINROOM_RESULT_FAIL_NO_ENOUGH_MONEY")] JoinroomResultFailNoEnoughMoney = 10,
    [pbr::OriginalName("JOINROOM_RESULT_FAIL_ROOM_ALREADY_IN_GAME")] JoinroomResultFailRoomAlreadyInGame = 11,
    [pbr::OriginalName("QUITROOM_RESULT_OK")] QuitroomResultOk = 15,
    [pbr::OriginalName("QUITROOM_RESULT_FAIL")] QuitroomResultFail = 16,
    [pbr::OriginalName("QUITROOM_RESULT_FAIL_NO_SUCH_ROOM")] QuitroomResultFailNoSuchRoom = 17,
    [pbr::OriginalName("QUITROOM_RESULT_FAIL_INVALID_ID")] QuitroomResultFailInvalidId = 18,
    [pbr::OriginalName("GAMESTART_OK")] GamestartOk = 19,
    [pbr::OriginalName("GAMESTART_FAIL_NO_SUCH_ROOM")] GamestartFailNoSuchRoom = 20,
    [pbr::OriginalName("GAMESTART_FAIL_NOT_ROOM_OWNER")] GamestartFailNotRoomOwner = 21,
    [pbr::OriginalName("GAMESTART_FAIL_NO_ENOUGH_USER")] GamestartFailNoEnoughUser = 22,
    [pbr::OriginalName("GAMESTART_FAIL_ROOM_ALREADY_IN_GAME")] GamestartFailRoomAlreadyInGame = 23,
  }

  #endregion

  #region Messages
  public sealed partial class SeatTableItem : pb::IMessage<SeatTableItem> {
    private static readonly pb::MessageParser<SeatTableItem> _parser = new pb::MessageParser<SeatTableItem>(() => new SeatTableItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SeatTableItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeatTableItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeatTableItem(SeatTableItem other) : this() {
      playerID_ = other.playerID_;
      seatNumber_ = other.seatNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SeatTableItem Clone() {
      return new SeatTableItem(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SeatNumber" field.</summary>
    public const int SeatNumberFieldNumber = 2;
    private int seatNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeatNumber {
      get { return seatNumber_; }
      set {
        seatNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SeatTableItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SeatTableItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (SeatNumber != other.SeatNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (SeatNumber != 0) hash ^= SeatNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (SeatNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeatNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (SeatNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SeatTableItem other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.SeatNumber != 0) {
        SeatNumber = other.SeatNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 16: {
            SeatNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Card : pb::IMessage<Card> {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      suit_ = other.suit_;
      rank_ = other.rank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 1;
    private int suit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Suit != other.Suit) return false;
      if (Rank != other.Rank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Suit != 0) hash ^= Suit.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Suit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Suit);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Suit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Suit);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Suit != 0) {
        Suit = other.Suit;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Suit = input.ReadInt32();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerTryJoin : pb::IMessage<PlayerTryJoin> {
    private static readonly pb::MessageParser<PlayerTryJoin> _parser = new pb::MessageParser<PlayerTryJoin>(() => new PlayerTryJoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTryJoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTryJoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTryJoin(PlayerTryJoin other) : this() {
      playerID_ = other.playerID_;
      roomID_ = other.roomID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTryJoin Clone() {
      return new PlayerTryJoin(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    /// <summary>
    ///节省时间的做法，后续可迭代修正：用户输入PlayerID作为唯一标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTryJoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTryJoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (RoomID != other.RoomID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTryJoin other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerJoinResult : pb::IMessage<PlayerJoinResult> {
    private static readonly pb::MessageParser<PlayerJoinResult> _parser = new pb::MessageParser<PlayerJoinResult>(() => new PlayerJoinResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerJoinResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinResult(PlayerJoinResult other) : this() {
      playerID_ = other.playerID_;
      roomID_ = other.roomID_;
      joinResult_ = other.joinResult_;
      seatTable_ = other.seatTable_.Clone();
      money_ = other.money_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerJoinResult Clone() {
      return new PlayerJoinResult(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "JoinResult" field.</summary>
    public const int JoinResultFieldNumber = 3;
    private int joinResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinResult {
      get { return joinResult_; }
      set {
        joinResult_ = value;
      }
    }

    /// <summary>Field number for the "SeatTable" field.</summary>
    public const int SeatTableFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texus.SeatTableItem> _repeated_seatTable_codec
        = pb::FieldCodec.ForMessage(34, global::Texus.SeatTableItem.Parser);
    private readonly pbc::RepeatedField<global::Texus.SeatTableItem> seatTable_ = new pbc::RepeatedField<global::Texus.SeatTableItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Texus.SeatTableItem> SeatTable {
      get { return seatTable_; }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 5;
    private int money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerJoinResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerJoinResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (RoomID != other.RoomID) return false;
      if (JoinResult != other.JoinResult) return false;
      if(!seatTable_.Equals(other.seatTable_)) return false;
      if (Money != other.Money) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (JoinResult != 0) hash ^= JoinResult.GetHashCode();
      hash ^= seatTable_.GetHashCode();
      if (Money != 0) hash ^= Money.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (JoinResult != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(JoinResult);
      }
      seatTable_.WriteTo(output, _repeated_seatTable_codec);
      if (Money != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (JoinResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinResult);
      }
      size += seatTable_.CalculateSize(_repeated_seatTable_codec);
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerJoinResult other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.JoinResult != 0) {
        JoinResult = other.JoinResult;
      }
      seatTable_.Add(other.seatTable_);
      if (other.Money != 0) {
        Money = other.Money;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            JoinResult = input.ReadInt32();
            break;
          }
          case 34: {
            seatTable_.AddEntriesFrom(input, _repeated_seatTable_codec);
            break;
          }
          case 40: {
            Money = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerTryQuitRoom : pb::IMessage<PlayerTryQuitRoom> {
    private static readonly pb::MessageParser<PlayerTryQuitRoom> _parser = new pb::MessageParser<PlayerTryQuitRoom>(() => new PlayerTryQuitRoom());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerTryQuitRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTryQuitRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTryQuitRoom(PlayerTryQuitRoom other) : this() {
      playerID_ = other.playerID_;
      roomID_ = other.roomID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerTryQuitRoom Clone() {
      return new PlayerTryQuitRoom(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerTryQuitRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerTryQuitRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (RoomID != other.RoomID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerTryQuitRoom other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerQuitRoomResult : pb::IMessage<PlayerQuitRoomResult> {
    private static readonly pb::MessageParser<PlayerQuitRoomResult> _parser = new pb::MessageParser<PlayerQuitRoomResult>(() => new PlayerQuitRoomResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerQuitRoomResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerQuitRoomResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerQuitRoomResult(PlayerQuitRoomResult other) : this() {
      playerID_ = other.playerID_;
      roomID_ = other.roomID_;
      quitResult_ = other.quitResult_;
      seatTable_ = other.seatTable_.Clone();
      money_ = other.money_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerQuitRoomResult Clone() {
      return new PlayerQuitRoomResult(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "QuitResult" field.</summary>
    public const int QuitResultFieldNumber = 3;
    private int quitResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuitResult {
      get { return quitResult_; }
      set {
        quitResult_ = value;
      }
    }

    /// <summary>Field number for the "SeatTable" field.</summary>
    public const int SeatTableFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Texus.SeatTableItem> _repeated_seatTable_codec
        = pb::FieldCodec.ForMessage(34, global::Texus.SeatTableItem.Parser);
    private readonly pbc::RepeatedField<global::Texus.SeatTableItem> seatTable_ = new pbc::RepeatedField<global::Texus.SeatTableItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Texus.SeatTableItem> SeatTable {
      get { return seatTable_; }
    }

    /// <summary>Field number for the "money" field.</summary>
    public const int MoneyFieldNumber = 5;
    private int money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerQuitRoomResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerQuitRoomResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (RoomID != other.RoomID) return false;
      if (QuitResult != other.QuitResult) return false;
      if(!seatTable_.Equals(other.seatTable_)) return false;
      if (Money != other.Money) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (QuitResult != 0) hash ^= QuitResult.GetHashCode();
      hash ^= seatTable_.GetHashCode();
      if (Money != 0) hash ^= Money.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (QuitResult != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(QuitResult);
      }
      seatTable_.WriteTo(output, _repeated_seatTable_codec);
      if (Money != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Money);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (QuitResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuitResult);
      }
      size += seatTable_.CalculateSize(_repeated_seatTable_codec);
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerQuitRoomResult other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.QuitResult != 0) {
        QuitResult = other.QuitResult;
      }
      seatTable_.Add(other.seatTable_);
      if (other.Money != 0) {
        Money = other.Money;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            QuitResult = input.ReadInt32();
            break;
          }
          case 34: {
            seatTable_.AddEntriesFrom(input, _repeated_seatTable_codec);
            break;
          }
          case 40: {
            Money = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BroadcastSeatTable : pb::IMessage<BroadcastSeatTable> {
    private static readonly pb::MessageParser<BroadcastSeatTable> _parser = new pb::MessageParser<BroadcastSeatTable>(() => new BroadcastSeatTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadcastSeatTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastSeatTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastSeatTable(BroadcastSeatTable other) : this() {
      seatTable_ = other.seatTable_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadcastSeatTable Clone() {
      return new BroadcastSeatTable(this);
    }

    /// <summary>Field number for the "SeatTable" field.</summary>
    public const int SeatTableFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Texus.SeatTableItem> _repeated_seatTable_codec
        = pb::FieldCodec.ForMessage(10, global::Texus.SeatTableItem.Parser);
    private readonly pbc::RepeatedField<global::Texus.SeatTableItem> seatTable_ = new pbc::RepeatedField<global::Texus.SeatTableItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Texus.SeatTableItem> SeatTable {
      get { return seatTable_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadcastSeatTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadcastSeatTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!seatTable_.Equals(other.seatTable_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= seatTable_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      seatTable_.WriteTo(output, _repeated_seatTable_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += seatTable_.CalculateSize(_repeated_seatTable_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadcastSeatTable other) {
      if (other == null) {
        return;
      }
      seatTable_.Add(other.seatTable_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            seatTable_.AddEntriesFrom(input, _repeated_seatTable_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStart : pb::IMessage<GameStart> {
    private static readonly pb::MessageParser<GameStart> _parser = new pb::MessageParser<GameStart>(() => new GameStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart(GameStart other) : this() {
      playerID_ = other.playerID_;
      roomID_ = other.roomID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStart Clone() {
      return new GameStart(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (RoomID != other.RoomID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStart other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameStartResult : pb::IMessage<GameStartResult> {
    private static readonly pb::MessageParser<GameStartResult> _parser = new pb::MessageParser<GameStartResult>(() => new GameStartResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameStartResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStartResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStartResult(GameStartResult other) : this() {
      playerID_ = other.playerID_;
      roomID_ = other.roomID_;
      gameStartResult_ = other.gameStartResult_;
      hole_ = other.hole_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameStartResult Clone() {
      return new GameStartResult(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoomID" field.</summary>
    public const int RoomIDFieldNumber = 2;
    private int roomID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomID {
      get { return roomID_; }
      set {
        roomID_ = value;
      }
    }

    /// <summary>Field number for the "GameStartResult" field.</summary>
    public const int GameStartResult_FieldNumber = 3;
    private int gameStartResult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameStartResult_ {
      get { return gameStartResult_; }
      set {
        gameStartResult_ = value;
      }
    }

    /// <summary>Field number for the "hole" field.</summary>
    public const int HoleFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Texus.Card> _repeated_hole_codec
        = pb::FieldCodec.ForMessage(42, global::Texus.Card.Parser);
    private readonly pbc::RepeatedField<global::Texus.Card> hole_ = new pbc::RepeatedField<global::Texus.Card>();
    /// <summary>
    ///repeated Card flop=4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Texus.Card> Hole {
      get { return hole_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameStartResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameStartResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (RoomID != other.RoomID) return false;
      if (GameStartResult_ != other.GameStartResult_) return false;
      if(!hole_.Equals(other.hole_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (RoomID != 0) hash ^= RoomID.GetHashCode();
      if (GameStartResult_ != 0) hash ^= GameStartResult_.GetHashCode();
      hash ^= hole_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (RoomID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomID);
      }
      if (GameStartResult_ != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameStartResult_);
      }
      hole_.WriteTo(output, _repeated_hole_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (RoomID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
      }
      if (GameStartResult_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameStartResult_);
      }
      size += hole_.CalculateSize(_repeated_hole_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameStartResult other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.RoomID != 0) {
        RoomID = other.RoomID;
      }
      if (other.GameStartResult_ != 0) {
        GameStartResult_ = other.GameStartResult_;
      }
      hole_.Add(other.hole_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 16: {
            RoomID = input.ReadInt32();
            break;
          }
          case 24: {
            GameStartResult_ = input.ReadInt32();
            break;
          }
          case 42: {
            hole_.AddEntriesFrom(input, _repeated_hole_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Get : pb::IMessage<Get> {
    private static readonly pb::MessageParser<Get> _parser = new pb::MessageParser<Get>(() => new Get());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get(Get other) : this() {
      playerID_ = other.playerID_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get Clone() {
      return new Get(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSyncData : pb::IMessage<PlayerSyncData> {
    private static readonly pb::MessageParser<PlayerSyncData> _parser = new pb::MessageParser<PlayerSyncData>(() => new PlayerSyncData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSyncData(PlayerSyncData other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSyncData Clone() {
      return new PlayerSyncData(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSyncData other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCreateReq : pb::IMessage<PlayerCreateReq> {
    private static readonly pb::MessageParser<PlayerCreateReq> _parser = new pb::MessageParser<PlayerCreateReq>(() => new PlayerCreateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateReq(PlayerCreateReq other) : this() {
      playerID_ = other.playerID_;
      password_ = other.password_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateReq Clone() {
      return new PlayerCreateReq(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (Password != other.Password) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCreateRsp : pb::IMessage<PlayerCreateRsp> {
    private static readonly pb::MessageParser<PlayerCreateRsp> _parser = new pb::MessageParser<PlayerCreateRsp>(() => new PlayerCreateRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCreateRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Texus.TexusRoomReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRsp(PlayerCreateRsp other) : this() {
      result_ = other.result_;
      playerID_ = other.playerID_;
      name_ = other.name_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRsp Clone() {
      return new PlayerCreateRsp(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 2;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCreateRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCreateRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (PlayerID != other.PlayerID) return false;
      if (Name != other.Name) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCreateRsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerID = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
