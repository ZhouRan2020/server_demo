// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_INCLUDED_player_2eproto
#define PROTOBUF_INCLUDED_player_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_player_2eproto 

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_player_2eproto
namespace TCCamp {
class AddReq;
class AddReqDefaultTypeInternal;
extern AddReqDefaultTypeInternal _AddReq_default_instance_;
class AddRsp;
class AddRspDefaultTypeInternal;
extern AddRspDefaultTypeInternal _AddRsp_default_instance_;
class BackPackContentRsp;
class BackPackContentRspDefaultTypeInternal;
extern BackPackContentRspDefaultTypeInternal _BackPackContentRsp_default_instance_;
class BuyItemReq;
class BuyItemReqDefaultTypeInternal;
extern BuyItemReqDefaultTypeInternal _BuyItemReq_default_instance_;
class BuyItemRsp;
class BuyItemRspDefaultTypeInternal;
extern BuyItemRspDefaultTypeInternal _BuyItemRsp_default_instance_;
class Get;
class GetDefaultTypeInternal;
extern GetDefaultTypeInternal _Get_default_instance_;
class GetBackPackContentReq;
class GetBackPackContentReqDefaultTypeInternal;
extern GetBackPackContentReqDefaultTypeInternal _GetBackPackContentReq_default_instance_;
class GetShopContentReq;
class GetShopContentReqDefaultTypeInternal;
extern GetShopContentReqDefaultTypeInternal _GetShopContentReq_default_instance_;
class Item;
class ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class PlayerCreateReq;
class PlayerCreateReqDefaultTypeInternal;
extern PlayerCreateReqDefaultTypeInternal _PlayerCreateReq_default_instance_;
class PlayerCreateRsp;
class PlayerCreateRspDefaultTypeInternal;
extern PlayerCreateRspDefaultTypeInternal _PlayerCreateRsp_default_instance_;
class PlayerLoginReq;
class PlayerLoginReqDefaultTypeInternal;
extern PlayerLoginReqDefaultTypeInternal _PlayerLoginReq_default_instance_;
class PlayerLoginRsp;
class PlayerLoginRspDefaultTypeInternal;
extern PlayerLoginRspDefaultTypeInternal _PlayerLoginRsp_default_instance_;
class PlayerSaveData;
class PlayerSaveDataDefaultTypeInternal;
extern PlayerSaveDataDefaultTypeInternal _PlayerSaveData_default_instance_;
class PlayerSyncData;
class PlayerSyncDataDefaultTypeInternal;
extern PlayerSyncDataDefaultTypeInternal _PlayerSyncData_default_instance_;
class ShopContentRsp;
class ShopContentRspDefaultTypeInternal;
extern ShopContentRspDefaultTypeInternal _ShopContentRsp_default_instance_;
class SyncAnnounce;
class SyncAnnounceDefaultTypeInternal;
extern SyncAnnounceDefaultTypeInternal _SyncAnnounce_default_instance_;
}  // namespace TCCamp
namespace google {
namespace protobuf {
template<> ::TCCamp::AddReq* Arena::CreateMaybeMessage<::TCCamp::AddReq>(Arena*);
template<> ::TCCamp::AddRsp* Arena::CreateMaybeMessage<::TCCamp::AddRsp>(Arena*);
template<> ::TCCamp::BackPackContentRsp* Arena::CreateMaybeMessage<::TCCamp::BackPackContentRsp>(Arena*);
template<> ::TCCamp::BuyItemReq* Arena::CreateMaybeMessage<::TCCamp::BuyItemReq>(Arena*);
template<> ::TCCamp::BuyItemRsp* Arena::CreateMaybeMessage<::TCCamp::BuyItemRsp>(Arena*);
template<> ::TCCamp::Get* Arena::CreateMaybeMessage<::TCCamp::Get>(Arena*);
template<> ::TCCamp::GetBackPackContentReq* Arena::CreateMaybeMessage<::TCCamp::GetBackPackContentReq>(Arena*);
template<> ::TCCamp::GetShopContentReq* Arena::CreateMaybeMessage<::TCCamp::GetShopContentReq>(Arena*);
template<> ::TCCamp::Item* Arena::CreateMaybeMessage<::TCCamp::Item>(Arena*);
template<> ::TCCamp::PlayerCreateReq* Arena::CreateMaybeMessage<::TCCamp::PlayerCreateReq>(Arena*);
template<> ::TCCamp::PlayerCreateRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerCreateRsp>(Arena*);
template<> ::TCCamp::PlayerLoginReq* Arena::CreateMaybeMessage<::TCCamp::PlayerLoginReq>(Arena*);
template<> ::TCCamp::PlayerLoginRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerLoginRsp>(Arena*);
template<> ::TCCamp::PlayerSaveData* Arena::CreateMaybeMessage<::TCCamp::PlayerSaveData>(Arena*);
template<> ::TCCamp::PlayerSyncData* Arena::CreateMaybeMessage<::TCCamp::PlayerSyncData>(Arena*);
template<> ::TCCamp::ShopContentRsp* Arena::CreateMaybeMessage<::TCCamp::ShopContentRsp>(Arena*);
template<> ::TCCamp::SyncAnnounce* Arena::CreateMaybeMessage<::TCCamp::SyncAnnounce>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace TCCamp {

enum CLIENT_CMD {
  CLIENT_CMD_INVALID = 0,
  CLIENT_CMD_BEGIN = 30000,
  CLIENT_PING = 30001,
  CLIENT_ADD_REQ = 30003,
  CLIENT_LOGIN_REQ = 30004,
  CLIENT_CREATE_REQ = 30005,
  CLIENT_ANNOUNCE_REQ = 30006,
  CLIENT_CMD_END = 33000,
  CLIENT_GET_BACKPACK_CONTENT_REQ = 30007,
  CLIENT_GET_SHOP_CONTENT_REQ = 30008,
  CLIENT_BUY_ITEM_REQ = 30009,
  CLIENT_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CLIENT_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CLIENT_CMD_IsValid(int value);
const CLIENT_CMD CLIENT_CMD_MIN = CLIENT_CMD_INVALID;
const CLIENT_CMD CLIENT_CMD_MAX = CLIENT_CMD_END;
const int CLIENT_CMD_ARRAYSIZE = CLIENT_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CLIENT_CMD_descriptor();
inline const ::std::string& CLIENT_CMD_Name(CLIENT_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CLIENT_CMD_descriptor(), value);
}
inline bool CLIENT_CMD_Parse(
    const ::std::string& name, CLIENT_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CLIENT_CMD>(
    CLIENT_CMD_descriptor(), name, value);
}
enum SERVER_CMD {
  SERVER_CMD_INVALID = 0,
  SERVER_CMD_BEGIN = 1000,
  SERVER_PONG = 1001,
  SERVER_ADD_RSP = 1003,
  SERVER_LOGIN_RSP = 1004,
  SERVER_CREATE_RSP = 1005,
  SERVER_ANNOUNCE_RSP = 1006,
  GM_OPERATE_RSP = 1100,
  SERVER_CMD_END = 10000,
  SERVER_CMD_SHOP_CONTENT_RSP = 1007,
  SERVER_CMD_BACKPACK_CONTENT_RSP = 1008,
  SERVER_BUY_ITEM_RSP = 1009,
  SERVER_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVER_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVER_CMD_IsValid(int value);
const SERVER_CMD SERVER_CMD_MIN = SERVER_CMD_INVALID;
const SERVER_CMD SERVER_CMD_MAX = SERVER_CMD_END;
const int SERVER_CMD_ARRAYSIZE = SERVER_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_CMD_descriptor();
inline const ::std::string& SERVER_CMD_Name(SERVER_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_CMD_descriptor(), value);
}
inline bool SERVER_CMD_Parse(
    const ::std::string& name, SERVER_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_CMD>(
    SERVER_CMD_descriptor(), name, value);
}
enum PROTO_RESULT_CODE {
  SERVER_LOGIN_RESULT_OK = 0,
  SERVER_LOGIN_RESULT_FAIL = 1,
  SERVER_LOGIN_RESULT_FAIL_NO_SUCH_PLAYER = -2,
  SERVER_LOGIN_RESULT_FAIL_ALREADY_IN_GAME = 3,
  SERVER_LOGIN_RESULT_FAIL_WRONG = 4,
  SERVER_GET_BACKPACK_CONTENT_FAIL = 5,
  SERVER_GET_BACKPACK_CONTENT_SUCCESS = 6,
  SERVER_GET_SHOP_CONTENT_FAIL = 7,
  SERVER_GET_SHOP_CONTENT_SUCCESS = 8,
  SERVER_BUY_RESULT_SUCCESS = 9,
  SERVER_BUY_RESULT_FAIL = 10,
  PROTO_RESULT_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PROTO_RESULT_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PROTO_RESULT_CODE_IsValid(int value);
const PROTO_RESULT_CODE PROTO_RESULT_CODE_MIN = SERVER_LOGIN_RESULT_FAIL_NO_SUCH_PLAYER;
const PROTO_RESULT_CODE PROTO_RESULT_CODE_MAX = SERVER_BUY_RESULT_FAIL;
const int PROTO_RESULT_CODE_ARRAYSIZE = PROTO_RESULT_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PROTO_RESULT_CODE_descriptor();
inline const ::std::string& PROTO_RESULT_CODE_Name(PROTO_RESULT_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PROTO_RESULT_CODE_descriptor(), value);
}
inline bool PROTO_RESULT_CODE_Parse(
    const ::std::string& name, PROTO_RESULT_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PROTO_RESULT_CODE>(
    PROTO_RESULT_CODE_descriptor(), name, value);
}
// ===================================================================

class AddReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.AddReq) */ {
 public:
  AddReq();
  virtual ~AddReq();

  AddReq(const AddReq& from);

  inline AddReq& operator=(const AddReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddReq(AddReq&& from) noexcept
    : AddReq() {
    *this = ::std::move(from);
  }

  inline AddReq& operator=(AddReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReq* internal_default_instance() {
    return reinterpret_cast<const AddReq*>(
               &_AddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddReq* other);
  friend void swap(AddReq& a, AddReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddReq* New() const final {
    return CreateMaybeMessage<AddReq>(NULL);
  }

  AddReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddReq& from);
  void MergeFrom(const AddReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 A = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 B = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.AddReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.AddRsp) */ {
 public:
  AddRsp();
  virtual ~AddRsp();

  AddRsp(const AddRsp& from);

  inline AddRsp& operator=(const AddRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRsp(AddRsp&& from) noexcept
    : AddRsp() {
    *this = ::std::move(from);
  }

  inline AddRsp& operator=(AddRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRsp* internal_default_instance() {
    return reinterpret_cast<const AddRsp*>(
               &_AddRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddRsp* other);
  friend void swap(AddRsp& a, AddRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRsp* New() const final {
    return CreateMaybeMessage<AddRsp>(NULL);
  }

  AddRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRsp& from);
  void MergeFrom(const AddRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 A = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 B = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // int32 Result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.AddRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Get : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.Get) */ {
 public:
  Get();
  virtual ~Get();

  Get(const Get& from);

  inline Get& operator=(const Get& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Get(Get&& from) noexcept
    : Get() {
    *this = ::std::move(from);
  }

  inline Get& operator=(Get&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Get& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Get* internal_default_instance() {
    return reinterpret_cast<const Get*>(
               &_Get_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Get* other);
  friend void swap(Get& a, Get& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Get* New() const final {
    return CreateMaybeMessage<Get>(NULL);
  }

  Get* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Get>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Get& from);
  void MergeFrom(const Get& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:TCCamp.Get)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSaveData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSaveData) */ {
 public:
  PlayerSaveData();
  virtual ~PlayerSaveData();

  PlayerSaveData(const PlayerSaveData& from);

  inline PlayerSaveData& operator=(const PlayerSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSaveData(PlayerSaveData&& from) noexcept
    : PlayerSaveData() {
    *this = ::std::move(from);
  }

  inline PlayerSaveData& operator=(PlayerSaveData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSaveData* internal_default_instance() {
    return reinterpret_cast<const PlayerSaveData*>(
               &_PlayerSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PlayerSaveData* other);
  friend void swap(PlayerSaveData& a, PlayerSaveData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSaveData* New() const final {
    return CreateMaybeMessage<PlayerSaveData>(NULL);
  }

  PlayerSaveData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSaveData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSaveData& from);
  void MergeFrom(const PlayerSaveData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSaveData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSaveData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSyncData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSyncData) */ {
 public:
  PlayerSyncData();
  virtual ~PlayerSyncData();

  PlayerSyncData(const PlayerSyncData& from);

  inline PlayerSyncData& operator=(const PlayerSyncData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSyncData(PlayerSyncData&& from) noexcept
    : PlayerSyncData() {
    *this = ::std::move(from);
  }

  inline PlayerSyncData& operator=(PlayerSyncData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSyncData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSyncData* internal_default_instance() {
    return reinterpret_cast<const PlayerSyncData*>(
               &_PlayerSyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlayerSyncData* other);
  friend void swap(PlayerSyncData& a, PlayerSyncData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSyncData* New() const final {
    return CreateMaybeMessage<PlayerSyncData>(NULL);
  }

  PlayerSyncData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSyncData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSyncData& from);
  void MergeFrom(const PlayerSyncData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSyncData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSyncData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerLoginReq) */ {
 public:
  PlayerLoginReq();
  virtual ~PlayerLoginReq();

  PlayerLoginReq(const PlayerLoginReq& from);

  inline PlayerLoginReq& operator=(const PlayerLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerLoginReq(PlayerLoginReq&& from) noexcept
    : PlayerLoginReq() {
    *this = ::std::move(from);
  }

  inline PlayerLoginReq& operator=(PlayerLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginReq* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginReq*>(
               &_PlayerLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PlayerLoginReq* other);
  friend void swap(PlayerLoginReq& a, PlayerLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginReq* New() const final {
    return CreateMaybeMessage<PlayerLoginReq>(NULL);
  }

  PlayerLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerLoginReq& from);
  void MergeFrom(const PlayerLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerLoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerLoginRsp) */ {
 public:
  PlayerLoginRsp();
  virtual ~PlayerLoginRsp();

  PlayerLoginRsp(const PlayerLoginRsp& from);

  inline PlayerLoginRsp& operator=(const PlayerLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerLoginRsp(PlayerLoginRsp&& from) noexcept
    : PlayerLoginRsp() {
    *this = ::std::move(from);
  }

  inline PlayerLoginRsp& operator=(PlayerLoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginRsp*>(
               &_PlayerLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PlayerLoginRsp* other);
  friend void swap(PlayerLoginRsp& a, PlayerLoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginRsp* New() const final {
    return CreateMaybeMessage<PlayerLoginRsp>(NULL);
  }

  PlayerLoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerLoginRsp& from);
  void MergeFrom(const PlayerLoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .TCCamp.PlayerSyncData PlayerData = 3;
  bool has_playerdata() const;
  void clear_playerdata();
  static const int kPlayerDataFieldNumber = 3;
  private:
  const ::TCCamp::PlayerSyncData& _internal_playerdata() const;
  public:
  const ::TCCamp::PlayerSyncData& playerdata() const;
  ::TCCamp::PlayerSyncData* release_playerdata();
  ::TCCamp::PlayerSyncData* mutable_playerdata();
  void set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerLoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::TCCamp::PlayerSyncData* playerdata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerCreateReq) */ {
 public:
  PlayerCreateReq();
  virtual ~PlayerCreateReq();

  PlayerCreateReq(const PlayerCreateReq& from);

  inline PlayerCreateReq& operator=(const PlayerCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateReq(PlayerCreateReq&& from) noexcept
    : PlayerCreateReq() {
    *this = ::std::move(from);
  }

  inline PlayerCreateReq& operator=(PlayerCreateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateReq* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateReq*>(
               &_PlayerCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PlayerCreateReq* other);
  friend void swap(PlayerCreateReq& a, PlayerCreateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateReq* New() const final {
    return CreateMaybeMessage<PlayerCreateReq>(NULL);
  }

  PlayerCreateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateReq& from);
  void MergeFrom(const PlayerCreateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerCreateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerCreateRsp) */ {
 public:
  PlayerCreateRsp();
  virtual ~PlayerCreateRsp();

  PlayerCreateRsp(const PlayerCreateRsp& from);

  inline PlayerCreateRsp& operator=(const PlayerCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateRsp(PlayerCreateRsp&& from) noexcept
    : PlayerCreateRsp() {
    *this = ::std::move(from);
  }

  inline PlayerCreateRsp& operator=(PlayerCreateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateRsp*>(
               &_PlayerCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PlayerCreateRsp* other);
  friend void swap(PlayerCreateRsp& a, PlayerCreateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateRsp* New() const final {
    return CreateMaybeMessage<PlayerCreateRsp>(NULL);
  }

  PlayerCreateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateRsp& from);
  void MergeFrom(const PlayerCreateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 2;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerCreateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncAnnounce : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SyncAnnounce) */ {
 public:
  SyncAnnounce();
  virtual ~SyncAnnounce();

  SyncAnnounce(const SyncAnnounce& from);

  inline SyncAnnounce& operator=(const SyncAnnounce& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncAnnounce(SyncAnnounce&& from) noexcept
    : SyncAnnounce() {
    *this = ::std::move(from);
  }

  inline SyncAnnounce& operator=(SyncAnnounce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncAnnounce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncAnnounce* internal_default_instance() {
    return reinterpret_cast<const SyncAnnounce*>(
               &_SyncAnnounce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SyncAnnounce* other);
  friend void swap(SyncAnnounce& a, SyncAnnounce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncAnnounce* New() const final {
    return CreateMaybeMessage<SyncAnnounce>(NULL);
  }

  SyncAnnounce* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncAnnounce>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncAnnounce& from);
  void MergeFrom(const SyncAnnounce& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncAnnounce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Announce = 1;
  void clear_announce();
  static const int kAnnounceFieldNumber = 1;
  const ::std::string& announce() const;
  void set_announce(const ::std::string& value);
  #if LANG_CXX11
  void set_announce(::std::string&& value);
  #endif
  void set_announce(const char* value);
  void set_announce(const void* value, size_t size);
  ::std::string* mutable_announce();
  ::std::string* release_announce();
  void set_allocated_announce(::std::string* announce);

  // @@protoc_insertion_point(class_scope:TCCamp.SyncAnnounce)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr announce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(Item&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Item* other);
  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Item* New() const final {
    return CreateMaybeMessage<Item>(NULL);
  }

  Item* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ItemID = 1;
  void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  ::google::protobuf::int32 itemid() const;
  void set_itemid(::google::protobuf::int32 value);

  // int32 Price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // int32 HeapSize = 3;
  void clear_heapsize();
  static const int kHeapSizeFieldNumber = 3;
  ::google::protobuf::int32 heapsize() const;
  void set_heapsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 heapsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBackPackContentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.GetBackPackContentReq) */ {
 public:
  GetBackPackContentReq();
  virtual ~GetBackPackContentReq();

  GetBackPackContentReq(const GetBackPackContentReq& from);

  inline GetBackPackContentReq& operator=(const GetBackPackContentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBackPackContentReq(GetBackPackContentReq&& from) noexcept
    : GetBackPackContentReq() {
    *this = ::std::move(from);
  }

  inline GetBackPackContentReq& operator=(GetBackPackContentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBackPackContentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBackPackContentReq* internal_default_instance() {
    return reinterpret_cast<const GetBackPackContentReq*>(
               &_GetBackPackContentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetBackPackContentReq* other);
  friend void swap(GetBackPackContentReq& a, GetBackPackContentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBackPackContentReq* New() const final {
    return CreateMaybeMessage<GetBackPackContentReq>(NULL);
  }

  GetBackPackContentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBackPackContentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBackPackContentReq& from);
  void MergeFrom(const GetBackPackContentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBackPackContentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:TCCamp.GetBackPackContentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackPackContentRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BackPackContentRsp) */ {
 public:
  BackPackContentRsp();
  virtual ~BackPackContentRsp();

  BackPackContentRsp(const BackPackContentRsp& from);

  inline BackPackContentRsp& operator=(const BackPackContentRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BackPackContentRsp(BackPackContentRsp&& from) noexcept
    : BackPackContentRsp() {
    *this = ::std::move(from);
  }

  inline BackPackContentRsp& operator=(BackPackContentRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BackPackContentRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackPackContentRsp* internal_default_instance() {
    return reinterpret_cast<const BackPackContentRsp*>(
               &_BackPackContentRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(BackPackContentRsp* other);
  friend void swap(BackPackContentRsp& a, BackPackContentRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BackPackContentRsp* New() const final {
    return CreateMaybeMessage<BackPackContentRsp>(NULL);
  }

  BackPackContentRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BackPackContentRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BackPackContentRsp& from);
  void MergeFrom(const BackPackContentRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackPackContentRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.Item items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::TCCamp::Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >*
      mutable_items();
  const ::TCCamp::Item& items(int index) const;
  ::TCCamp::Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >&
      items() const;

  // int32 GetResult = 1;
  void clear_getresult();
  static const int kGetResultFieldNumber = 1;
  ::google::protobuf::int32 getresult() const;
  void set_getresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.BackPackContentRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Item > items_;
  ::google::protobuf::int32 getresult_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetShopContentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.GetShopContentReq) */ {
 public:
  GetShopContentReq();
  virtual ~GetShopContentReq();

  GetShopContentReq(const GetShopContentReq& from);

  inline GetShopContentReq& operator=(const GetShopContentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetShopContentReq(GetShopContentReq&& from) noexcept
    : GetShopContentReq() {
    *this = ::std::move(from);
  }

  inline GetShopContentReq& operator=(GetShopContentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetShopContentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetShopContentReq* internal_default_instance() {
    return reinterpret_cast<const GetShopContentReq*>(
               &_GetShopContentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(GetShopContentReq* other);
  friend void swap(GetShopContentReq& a, GetShopContentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetShopContentReq* New() const final {
    return CreateMaybeMessage<GetShopContentReq>(NULL);
  }

  GetShopContentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetShopContentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetShopContentReq& from);
  void MergeFrom(const GetShopContentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetShopContentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:TCCamp.GetShopContentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShopContentRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ShopContentRsp) */ {
 public:
  ShopContentRsp();
  virtual ~ShopContentRsp();

  ShopContentRsp(const ShopContentRsp& from);

  inline ShopContentRsp& operator=(const ShopContentRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShopContentRsp(ShopContentRsp&& from) noexcept
    : ShopContentRsp() {
    *this = ::std::move(from);
  }

  inline ShopContentRsp& operator=(ShopContentRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopContentRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShopContentRsp* internal_default_instance() {
    return reinterpret_cast<const ShopContentRsp*>(
               &_ShopContentRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ShopContentRsp* other);
  friend void swap(ShopContentRsp& a, ShopContentRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShopContentRsp* New() const final {
    return CreateMaybeMessage<ShopContentRsp>(NULL);
  }

  ShopContentRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShopContentRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShopContentRsp& from);
  void MergeFrom(const ShopContentRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopContentRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.Item items = 2;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 2;
  ::TCCamp::Item* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >*
      mutable_items();
  const ::TCCamp::Item& items(int index) const;
  ::TCCamp::Item* add_items();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >&
      items() const;

  // int32 GetResult = 1;
  void clear_getresult();
  static const int kGetResultFieldNumber = 1;
  ::google::protobuf::int32 getresult() const;
  void set_getresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ShopContentRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Item > items_;
  ::google::protobuf::int32 getresult_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuyItemReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BuyItemReq) */ {
 public:
  BuyItemReq();
  virtual ~BuyItemReq();

  BuyItemReq(const BuyItemReq& from);

  inline BuyItemReq& operator=(const BuyItemReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuyItemReq(BuyItemReq&& from) noexcept
    : BuyItemReq() {
    *this = ::std::move(from);
  }

  inline BuyItemReq& operator=(BuyItemReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyItemReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuyItemReq* internal_default_instance() {
    return reinterpret_cast<const BuyItemReq*>(
               &_BuyItemReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(BuyItemReq* other);
  friend void swap(BuyItemReq& a, BuyItemReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuyItemReq* New() const final {
    return CreateMaybeMessage<BuyItemReq>(NULL);
  }

  BuyItemReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuyItemReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuyItemReq& from);
  void MergeFrom(const BuyItemReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyItemReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 ItemID = 2;
  void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  ::google::protobuf::int32 itemid() const;
  void set_itemid(::google::protobuf::int32 value);

  // int32 BuyNumber = 3;
  void clear_buynumber();
  static const int kBuyNumberFieldNumber = 3;
  ::google::protobuf::int32 buynumber() const;
  void set_buynumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.BuyItemReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 buynumber_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuyItemRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BuyItemRsp) */ {
 public:
  BuyItemRsp();
  virtual ~BuyItemRsp();

  BuyItemRsp(const BuyItemRsp& from);

  inline BuyItemRsp& operator=(const BuyItemRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuyItemRsp(BuyItemRsp&& from) noexcept
    : BuyItemRsp() {
    *this = ::std::move(from);
  }

  inline BuyItemRsp& operator=(BuyItemRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyItemRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuyItemRsp* internal_default_instance() {
    return reinterpret_cast<const BuyItemRsp*>(
               &_BuyItemRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(BuyItemRsp* other);
  friend void swap(BuyItemRsp& a, BuyItemRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuyItemRsp* New() const final {
    return CreateMaybeMessage<BuyItemRsp>(NULL);
  }

  BuyItemRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuyItemRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuyItemRsp& from);
  void MergeFrom(const BuyItemRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyItemRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.Item UpdatedItems = 3;
  int updateditems_size() const;
  void clear_updateditems();
  static const int kUpdatedItemsFieldNumber = 3;
  ::TCCamp::Item* mutable_updateditems(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >*
      mutable_updateditems();
  const ::TCCamp::Item& updateditems(int index) const;
  ::TCCamp::Item* add_updateditems();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >&
      updateditems() const;

  // int32 BuyResult = 1;
  void clear_buyresult();
  static const int kBuyResultFieldNumber = 1;
  ::google::protobuf::int32 buyresult() const;
  void set_buyresult(::google::protobuf::int32 value);

  // int32 MoneyLeft = 2;
  void clear_moneyleft();
  static const int kMoneyLeftFieldNumber = 2;
  ::google::protobuf::int32 moneyleft() const;
  void set_moneyleft(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.BuyItemRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::Item > updateditems_;
  ::google::protobuf::int32 buyresult_;
  ::google::protobuf::int32 moneyleft_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddReq

// int32 A = 1;
inline void AddReq::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 AddReq::a() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddReq.A)
  return a_;
}
inline void AddReq::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddReq.A)
}

// int32 B = 2;
inline void AddReq::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 AddReq::b() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddReq.B)
  return b_;
}
inline void AddReq::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddReq.B)
}

// -------------------------------------------------------------------

// AddRsp

// int32 A = 1;
inline void AddRsp::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 AddRsp::a() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.A)
  return a_;
}
inline void AddRsp::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.A)
}

// int32 B = 2;
inline void AddRsp::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 AddRsp::b() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.B)
  return b_;
}
inline void AddRsp::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.B)
}

// int32 Result = 3;
inline void AddRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 AddRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.Result)
  return result_;
}
inline void AddRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.Result)
}

// -------------------------------------------------------------------

// Get

// string PlayerID = 1;
inline void Get::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Get::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.Get.PlayerID)
  return playerid_.GetNoArena();
}
inline void Get::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.Get.PlayerID)
}
#if LANG_CXX11
inline void Get::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.Get.PlayerID)
}
#endif
inline void Get::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.Get.PlayerID)
}
inline void Get::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.Get.PlayerID)
}
inline ::std::string* Get::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.Get.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Get::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.Get.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Get::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.Get.PlayerID)
}

// string Password = 2;
inline void Get::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Get::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.Get.Password)
  return password_.GetNoArena();
}
inline void Get::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.Get.Password)
}
#if LANG_CXX11
inline void Get::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.Get.Password)
}
#endif
inline void Get::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.Get.Password)
}
inline void Get::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.Get.Password)
}
inline ::std::string* Get::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.Get.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Get::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.Get.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Get::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.Get.Password)
}

// -------------------------------------------------------------------

// PlayerSaveData

// string PlayerID = 1;
inline void PlayerSaveData::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerSaveData::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.PlayerID)
}
#if LANG_CXX11
inline void PlayerSaveData::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.PlayerID)
}
#endif
inline void PlayerSaveData::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.PlayerID)
}
inline void PlayerSaveData::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.PlayerID)
}
inline ::std::string* PlayerSaveData::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.PlayerID)
}

// string Password = 2;
inline void PlayerSaveData::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.Password)
  return password_.GetNoArena();
}
inline void PlayerSaveData::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.Password)
}
#if LANG_CXX11
inline void PlayerSaveData::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.Password)
}
#endif
inline void PlayerSaveData::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.Password)
}
inline void PlayerSaveData::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.Password)
}
inline ::std::string* PlayerSaveData::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.Password)
}

// bytes Name = 3;
inline void PlayerSaveData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.Name)
  return name_.GetNoArena();
}
inline void PlayerSaveData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.Name)
}
#if LANG_CXX11
inline void PlayerSaveData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.Name)
}
#endif
inline void PlayerSaveData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.Name)
}
inline void PlayerSaveData::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.Name)
}
inline ::std::string* PlayerSaveData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.Name)
}

// -------------------------------------------------------------------

// PlayerSyncData

// bytes Name = 1;
inline void PlayerSyncData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSyncData::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.Name)
  return name_.GetNoArena();
}
inline void PlayerSyncData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.Name)
}
#if LANG_CXX11
inline void PlayerSyncData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSyncData.Name)
}
#endif
inline void PlayerSyncData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSyncData.Name)
}
inline void PlayerSyncData::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSyncData.Name)
}
inline ::std::string* PlayerSyncData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSyncData::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSyncData.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSyncData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSyncData.Name)
}

// -------------------------------------------------------------------

// PlayerLoginReq

// string PlayerID = 1;
inline void PlayerLoginReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerLoginReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerLoginReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginReq.PlayerID)
}
#endif
inline void PlayerLoginReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginReq.PlayerID)
}
inline void PlayerLoginReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginReq.PlayerID)
}
inline ::std::string* PlayerLoginReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginReq.PlayerID)
}

// string Password = 2;
inline void PlayerLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginReq::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginReq.Password)
  return password_.GetNoArena();
}
inline void PlayerLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginReq.Password)
}
#if LANG_CXX11
inline void PlayerLoginReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginReq.Password)
}
#endif
inline void PlayerLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginReq.Password)
}
inline void PlayerLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginReq.Password)
}
inline ::std::string* PlayerLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginReq.Password)
}

// -------------------------------------------------------------------

// PlayerLoginRsp

// int32 Result = 1;
inline void PlayerLoginRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerLoginRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.Result)
  return result_;
}
inline void PlayerLoginRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginRsp.Result)
}

// string Reason = 2;
inline void PlayerLoginRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerLoginRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginRsp.Reason)
}
#if LANG_CXX11
inline void PlayerLoginRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginRsp.Reason)
}
#endif
inline void PlayerLoginRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginRsp.Reason)
}
inline void PlayerLoginRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginRsp.Reason)
}
inline ::std::string* PlayerLoginRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginRsp.Reason)
}

// .TCCamp.PlayerSyncData PlayerData = 3;
inline bool PlayerLoginRsp::has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != NULL;
}
inline void PlayerLoginRsp::clear_playerdata() {
  if (GetArenaNoVirtual() == NULL && playerdata_ != NULL) {
    delete playerdata_;
  }
  playerdata_ = NULL;
}
inline const ::TCCamp::PlayerSyncData& PlayerLoginRsp::_internal_playerdata() const {
  return *playerdata_;
}
inline const ::TCCamp::PlayerSyncData& PlayerLoginRsp::playerdata() const {
  const ::TCCamp::PlayerSyncData* p = playerdata_;
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.PlayerData)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::PlayerSyncData*>(
      &::TCCamp::_PlayerSyncData_default_instance_);
}
inline ::TCCamp::PlayerSyncData* PlayerLoginRsp::release_playerdata() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginRsp.PlayerData)
  
  ::TCCamp::PlayerSyncData* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}
inline ::TCCamp::PlayerSyncData* PlayerLoginRsp::mutable_playerdata() {
  
  if (playerdata_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::PlayerSyncData>(GetArenaNoVirtual());
    playerdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginRsp.PlayerData)
  return playerdata_;
}
inline void PlayerLoginRsp::set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerdata_;
  }
  if (playerdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginRsp.PlayerData)
}

// -------------------------------------------------------------------

// PlayerCreateReq

// string PlayerID = 1;
inline void PlayerCreateReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.PlayerID)
}
#endif
inline void PlayerCreateReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.PlayerID)
}
inline void PlayerCreateReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.PlayerID)
}
inline ::std::string* PlayerCreateReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.PlayerID)
}

// string Password = 2;
inline void PlayerCreateReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.Password)
  return password_.GetNoArena();
}
inline void PlayerCreateReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.Password)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.Password)
}
#endif
inline void PlayerCreateReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.Password)
}
inline void PlayerCreateReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.Password)
}
inline ::std::string* PlayerCreateReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.Password)
}

// bytes Name = 3;
inline void PlayerCreateReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.Name)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.Name)
}
#endif
inline void PlayerCreateReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.Name)
}
inline void PlayerCreateReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.Name)
}
inline ::std::string* PlayerCreateReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.Name)
}

// -------------------------------------------------------------------

// PlayerCreateRsp

// int32 Result = 1;
inline void PlayerCreateRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerCreateRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Result)
  return result_;
}
inline void PlayerCreateRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Result)
}

// string PlayerID = 2;
inline void PlayerCreateRsp::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateRsp::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.PlayerID)
}
#endif
inline void PlayerCreateRsp::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.PlayerID)
}
inline void PlayerCreateRsp::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.PlayerID)
}
inline ::std::string* PlayerCreateRsp::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.PlayerID)
}

// bytes Name = 3;
inline void PlayerCreateRsp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateRsp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Name)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.Name)
}
#endif
inline void PlayerCreateRsp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.Name)
}
inline void PlayerCreateRsp::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.Name)
}
inline ::std::string* PlayerCreateRsp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.Name)
}

// string Reason = 4;
inline void PlayerCreateRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerCreateRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Reason)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.Reason)
}
#endif
inline void PlayerCreateRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.Reason)
}
inline void PlayerCreateRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.Reason)
}
inline ::std::string* PlayerCreateRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.Reason)
}

// -------------------------------------------------------------------

// SyncAnnounce

// bytes Announce = 1;
inline void SyncAnnounce::clear_announce() {
  announce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncAnnounce::announce() const {
  // @@protoc_insertion_point(field_get:TCCamp.SyncAnnounce.Announce)
  return announce_.GetNoArena();
}
inline void SyncAnnounce::set_announce(const ::std::string& value) {
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.SyncAnnounce.Announce)
}
#if LANG_CXX11
inline void SyncAnnounce::set_announce(::std::string&& value) {
  
  announce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.SyncAnnounce.Announce)
}
#endif
inline void SyncAnnounce::set_announce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.SyncAnnounce.Announce)
}
inline void SyncAnnounce::set_announce(const void* value, size_t size) {
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.SyncAnnounce.Announce)
}
inline ::std::string* SyncAnnounce::mutable_announce() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.SyncAnnounce.Announce)
  return announce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncAnnounce::release_announce() {
  // @@protoc_insertion_point(field_release:TCCamp.SyncAnnounce.Announce)
  
  return announce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncAnnounce::set_allocated_announce(::std::string* announce) {
  if (announce != NULL) {
    
  } else {
    
  }
  announce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announce);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.SyncAnnounce.Announce)
}

// -------------------------------------------------------------------

// Item

// int32 ItemID = 1;
inline void Item::clear_itemid() {
  itemid_ = 0;
}
inline ::google::protobuf::int32 Item::itemid() const {
  // @@protoc_insertion_point(field_get:TCCamp.Item.ItemID)
  return itemid_;
}
inline void Item::set_itemid(::google::protobuf::int32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Item.ItemID)
}

// int32 Price = 2;
inline void Item::clear_price() {
  price_ = 0;
}
inline ::google::protobuf::int32 Item::price() const {
  // @@protoc_insertion_point(field_get:TCCamp.Item.Price)
  return price_;
}
inline void Item::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Item.Price)
}

// int32 HeapSize = 3;
inline void Item::clear_heapsize() {
  heapsize_ = 0;
}
inline ::google::protobuf::int32 Item::heapsize() const {
  // @@protoc_insertion_point(field_get:TCCamp.Item.HeapSize)
  return heapsize_;
}
inline void Item::set_heapsize(::google::protobuf::int32 value) {
  
  heapsize_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Item.HeapSize)
}

// -------------------------------------------------------------------

// GetBackPackContentReq

// string PlayerID = 1;
inline void GetBackPackContentReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBackPackContentReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.GetBackPackContentReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void GetBackPackContentReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.GetBackPackContentReq.PlayerID)
}
#if LANG_CXX11
inline void GetBackPackContentReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.GetBackPackContentReq.PlayerID)
}
#endif
inline void GetBackPackContentReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.GetBackPackContentReq.PlayerID)
}
inline void GetBackPackContentReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.GetBackPackContentReq.PlayerID)
}
inline ::std::string* GetBackPackContentReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.GetBackPackContentReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBackPackContentReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.GetBackPackContentReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBackPackContentReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.GetBackPackContentReq.PlayerID)
}

// -------------------------------------------------------------------

// BackPackContentRsp

// int32 GetResult = 1;
inline void BackPackContentRsp::clear_getresult() {
  getresult_ = 0;
}
inline ::google::protobuf::int32 BackPackContentRsp::getresult() const {
  // @@protoc_insertion_point(field_get:TCCamp.BackPackContentRsp.GetResult)
  return getresult_;
}
inline void BackPackContentRsp::set_getresult(::google::protobuf::int32 value) {
  
  getresult_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BackPackContentRsp.GetResult)
}

// repeated .TCCamp.Item items = 2;
inline int BackPackContentRsp::items_size() const {
  return items_.size();
}
inline void BackPackContentRsp::clear_items() {
  items_.Clear();
}
inline ::TCCamp::Item* BackPackContentRsp::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.BackPackContentRsp.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >*
BackPackContentRsp::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.BackPackContentRsp.items)
  return &items_;
}
inline const ::TCCamp::Item& BackPackContentRsp::items(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.BackPackContentRsp.items)
  return items_.Get(index);
}
inline ::TCCamp::Item* BackPackContentRsp::add_items() {
  // @@protoc_insertion_point(field_add:TCCamp.BackPackContentRsp.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >&
BackPackContentRsp::items() const {
  // @@protoc_insertion_point(field_list:TCCamp.BackPackContentRsp.items)
  return items_;
}

// -------------------------------------------------------------------

// GetShopContentReq

// string PlayerID = 1;
inline void GetShopContentReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetShopContentReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.GetShopContentReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void GetShopContentReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.GetShopContentReq.PlayerID)
}
#if LANG_CXX11
inline void GetShopContentReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.GetShopContentReq.PlayerID)
}
#endif
inline void GetShopContentReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.GetShopContentReq.PlayerID)
}
inline void GetShopContentReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.GetShopContentReq.PlayerID)
}
inline ::std::string* GetShopContentReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.GetShopContentReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetShopContentReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.GetShopContentReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetShopContentReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.GetShopContentReq.PlayerID)
}

// -------------------------------------------------------------------

// ShopContentRsp

// int32 GetResult = 1;
inline void ShopContentRsp::clear_getresult() {
  getresult_ = 0;
}
inline ::google::protobuf::int32 ShopContentRsp::getresult() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopContentRsp.GetResult)
  return getresult_;
}
inline void ShopContentRsp::set_getresult(::google::protobuf::int32 value) {
  
  getresult_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopContentRsp.GetResult)
}

// repeated .TCCamp.Item items = 2;
inline int ShopContentRsp::items_size() const {
  return items_.size();
}
inline void ShopContentRsp::clear_items() {
  items_.Clear();
}
inline ::TCCamp::Item* ShopContentRsp::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopContentRsp.items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >*
ShopContentRsp::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.ShopContentRsp.items)
  return &items_;
}
inline const ::TCCamp::Item& ShopContentRsp::items(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopContentRsp.items)
  return items_.Get(index);
}
inline ::TCCamp::Item* ShopContentRsp::add_items() {
  // @@protoc_insertion_point(field_add:TCCamp.ShopContentRsp.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >&
ShopContentRsp::items() const {
  // @@protoc_insertion_point(field_list:TCCamp.ShopContentRsp.items)
  return items_;
}

// -------------------------------------------------------------------

// BuyItemReq

// string PlayerID = 1;
inline void BuyItemReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BuyItemReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.BuyItemReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void BuyItemReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.BuyItemReq.PlayerID)
}
#if LANG_CXX11
inline void BuyItemReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.BuyItemReq.PlayerID)
}
#endif
inline void BuyItemReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.BuyItemReq.PlayerID)
}
inline void BuyItemReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.BuyItemReq.PlayerID)
}
inline ::std::string* BuyItemReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.BuyItemReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuyItemReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.BuyItemReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuyItemReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.BuyItemReq.PlayerID)
}

// int32 ItemID = 2;
inline void BuyItemReq::clear_itemid() {
  itemid_ = 0;
}
inline ::google::protobuf::int32 BuyItemReq::itemid() const {
  // @@protoc_insertion_point(field_get:TCCamp.BuyItemReq.ItemID)
  return itemid_;
}
inline void BuyItemReq::set_itemid(::google::protobuf::int32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BuyItemReq.ItemID)
}

// int32 BuyNumber = 3;
inline void BuyItemReq::clear_buynumber() {
  buynumber_ = 0;
}
inline ::google::protobuf::int32 BuyItemReq::buynumber() const {
  // @@protoc_insertion_point(field_get:TCCamp.BuyItemReq.BuyNumber)
  return buynumber_;
}
inline void BuyItemReq::set_buynumber(::google::protobuf::int32 value) {
  
  buynumber_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BuyItemReq.BuyNumber)
}

// -------------------------------------------------------------------

// BuyItemRsp

// int32 BuyResult = 1;
inline void BuyItemRsp::clear_buyresult() {
  buyresult_ = 0;
}
inline ::google::protobuf::int32 BuyItemRsp::buyresult() const {
  // @@protoc_insertion_point(field_get:TCCamp.BuyItemRsp.BuyResult)
  return buyresult_;
}
inline void BuyItemRsp::set_buyresult(::google::protobuf::int32 value) {
  
  buyresult_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BuyItemRsp.BuyResult)
}

// int32 MoneyLeft = 2;
inline void BuyItemRsp::clear_moneyleft() {
  moneyleft_ = 0;
}
inline ::google::protobuf::int32 BuyItemRsp::moneyleft() const {
  // @@protoc_insertion_point(field_get:TCCamp.BuyItemRsp.MoneyLeft)
  return moneyleft_;
}
inline void BuyItemRsp::set_moneyleft(::google::protobuf::int32 value) {
  
  moneyleft_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BuyItemRsp.MoneyLeft)
}

// repeated .TCCamp.Item UpdatedItems = 3;
inline int BuyItemRsp::updateditems_size() const {
  return updateditems_.size();
}
inline void BuyItemRsp::clear_updateditems() {
  updateditems_.Clear();
}
inline ::TCCamp::Item* BuyItemRsp::mutable_updateditems(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.BuyItemRsp.UpdatedItems)
  return updateditems_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >*
BuyItemRsp::mutable_updateditems() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.BuyItemRsp.UpdatedItems)
  return &updateditems_;
}
inline const ::TCCamp::Item& BuyItemRsp::updateditems(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.BuyItemRsp.UpdatedItems)
  return updateditems_.Get(index);
}
inline ::TCCamp::Item* BuyItemRsp::add_updateditems() {
  // @@protoc_insertion_point(field_add:TCCamp.BuyItemRsp.UpdatedItems)
  return updateditems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::Item >&
BuyItemRsp::updateditems() const {
  // @@protoc_insertion_point(field_list:TCCamp.BuyItemRsp.UpdatedItems)
  return updateditems_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCCamp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TCCamp::CLIENT_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::CLIENT_CMD>() {
  return ::TCCamp::CLIENT_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::SERVER_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::SERVER_CMD>() {
  return ::TCCamp::SERVER_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::PROTO_RESULT_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::PROTO_RESULT_CODE>() {
  return ::TCCamp::PROTO_RESULT_CODE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_player_2eproto
