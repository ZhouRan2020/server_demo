// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: texus_room.proto

#ifndef PROTOBUF_INCLUDED_texus_5froom_2eproto
#define PROTOBUF_INCLUDED_texus_5froom_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_texus_5froom_2eproto 

namespace protobuf_texus_5froom_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_texus_5froom_2eproto
namespace Texus {
class BroadcastSeatTable;
class BroadcastSeatTableDefaultTypeInternal;
extern BroadcastSeatTableDefaultTypeInternal _BroadcastSeatTable_default_instance_;
class Card;
class CardDefaultTypeInternal;
extern CardDefaultTypeInternal _Card_default_instance_;
class GameStart;
class GameStartDefaultTypeInternal;
extern GameStartDefaultTypeInternal _GameStart_default_instance_;
class GameStartResult;
class GameStartResultDefaultTypeInternal;
extern GameStartResultDefaultTypeInternal _GameStartResult_default_instance_;
class Get;
class GetDefaultTypeInternal;
extern GetDefaultTypeInternal _Get_default_instance_;
class PlayerCreateReq;
class PlayerCreateReqDefaultTypeInternal;
extern PlayerCreateReqDefaultTypeInternal _PlayerCreateReq_default_instance_;
class PlayerCreateRsp;
class PlayerCreateRspDefaultTypeInternal;
extern PlayerCreateRspDefaultTypeInternal _PlayerCreateRsp_default_instance_;
class PlayerJoinResult;
class PlayerJoinResultDefaultTypeInternal;
extern PlayerJoinResultDefaultTypeInternal _PlayerJoinResult_default_instance_;
class PlayerQuitRoomResult;
class PlayerQuitRoomResultDefaultTypeInternal;
extern PlayerQuitRoomResultDefaultTypeInternal _PlayerQuitRoomResult_default_instance_;
class PlayerSyncData;
class PlayerSyncDataDefaultTypeInternal;
extern PlayerSyncDataDefaultTypeInternal _PlayerSyncData_default_instance_;
class PlayerTryJoin;
class PlayerTryJoinDefaultTypeInternal;
extern PlayerTryJoinDefaultTypeInternal _PlayerTryJoin_default_instance_;
class PlayerTryQuitRoom;
class PlayerTryQuitRoomDefaultTypeInternal;
extern PlayerTryQuitRoomDefaultTypeInternal _PlayerTryQuitRoom_default_instance_;
class SeatTableItem;
class SeatTableItemDefaultTypeInternal;
extern SeatTableItemDefaultTypeInternal _SeatTableItem_default_instance_;
}  // namespace Texus
namespace google {
namespace protobuf {
template<> ::Texus::BroadcastSeatTable* Arena::CreateMaybeMessage<::Texus::BroadcastSeatTable>(Arena*);
template<> ::Texus::Card* Arena::CreateMaybeMessage<::Texus::Card>(Arena*);
template<> ::Texus::GameStart* Arena::CreateMaybeMessage<::Texus::GameStart>(Arena*);
template<> ::Texus::GameStartResult* Arena::CreateMaybeMessage<::Texus::GameStartResult>(Arena*);
template<> ::Texus::Get* Arena::CreateMaybeMessage<::Texus::Get>(Arena*);
template<> ::Texus::PlayerCreateReq* Arena::CreateMaybeMessage<::Texus::PlayerCreateReq>(Arena*);
template<> ::Texus::PlayerCreateRsp* Arena::CreateMaybeMessage<::Texus::PlayerCreateRsp>(Arena*);
template<> ::Texus::PlayerJoinResult* Arena::CreateMaybeMessage<::Texus::PlayerJoinResult>(Arena*);
template<> ::Texus::PlayerQuitRoomResult* Arena::CreateMaybeMessage<::Texus::PlayerQuitRoomResult>(Arena*);
template<> ::Texus::PlayerSyncData* Arena::CreateMaybeMessage<::Texus::PlayerSyncData>(Arena*);
template<> ::Texus::PlayerTryJoin* Arena::CreateMaybeMessage<::Texus::PlayerTryJoin>(Arena*);
template<> ::Texus::PlayerTryQuitRoom* Arena::CreateMaybeMessage<::Texus::PlayerTryQuitRoom>(Arena*);
template<> ::Texus::SeatTableItem* Arena::CreateMaybeMessage<::Texus::SeatTableItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Texus {

enum CLIENT_CMD {
  CLIENT_CMD_INVALID = 0,
  CLIENT_CMD_BEGIN = 30000,
  CLIENT_PING = 30001,
  CLIENT_LOGIN_REQ = 30004,
  CLIENT_CREATE_REQ = 30005,
  CLIENT_ANNOUNCE_REQ = 30006,
  CLIENT_JOIN_ROOM_REQ = 30007,
  CLIENT_QUIT_ROOM_REQ = 30008,
  CLIENT_GAMESTART_REQ = 30009,
  CLIENT_CMD_END = 33000,
  CLIENT_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CLIENT_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CLIENT_CMD_IsValid(int value);
const CLIENT_CMD CLIENT_CMD_MIN = CLIENT_CMD_INVALID;
const CLIENT_CMD CLIENT_CMD_MAX = CLIENT_CMD_END;
const int CLIENT_CMD_ARRAYSIZE = CLIENT_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CLIENT_CMD_descriptor();
inline const ::std::string& CLIENT_CMD_Name(CLIENT_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CLIENT_CMD_descriptor(), value);
}
inline bool CLIENT_CMD_Parse(
    const ::std::string& name, CLIENT_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CLIENT_CMD>(
    CLIENT_CMD_descriptor(), name, value);
}
enum SERVER_CMD {
  SERVER_CMD_INVALID = 0,
  SERVER_CMD_BEGIN = 1000,
  SERVER_PONG = 1001,
  SERVER_LOGIN_RSP = 1004,
  SERVER_CREATE_RSP = 1005,
  SERVER_ANNOUNCE_RSP = 1006,
  SERVER_JUDGE_JOIN_RSP = 1007,
  SERVER_QUITROOM_RSP = 1008,
  SERVER_BROADCAST_SEATTABLE = 1009,
  SERVER_GAMESTART_RSP = 1010,
  GM_OPERATE_RSP = 1100,
  SERVER_CMD_END = 10000,
  SERVER_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVER_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVER_CMD_IsValid(int value);
const SERVER_CMD SERVER_CMD_MIN = SERVER_CMD_INVALID;
const SERVER_CMD SERVER_CMD_MAX = SERVER_CMD_END;
const int SERVER_CMD_ARRAYSIZE = SERVER_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_CMD_descriptor();
inline const ::std::string& SERVER_CMD_Name(SERVER_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_CMD_descriptor(), value);
}
inline bool SERVER_CMD_Parse(
    const ::std::string& name, SERVER_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_CMD>(
    SERVER_CMD_descriptor(), name, value);
}
enum PROTO_RESULT_CODE {
  SERVER_LOGIN_RESULT_OK = 0,
  SERVER_LOGIN_RESULT_FAIL = 1,
  SERVER_LOGIN_RESULT_FAIL_NO_SUCH_PLAYER = -2,
  SERVER_LOGIN_RESULT_FAIL_ALREADY_IN_GAME = 3,
  SERVER_LOGIN_RESULT_FAIL_WRONG = 4,
  JOINROOM_RESULT_OK = 5,
  JOINROOM_RESULT_FAIL_EXISTING_PLAYER_INROOM = 6,
  JOINROOM_RESULT_FAIL_NO_SUCH_ROOM = 7,
  JOINROOM_RESULT_FAIL_BAD_PLAYERID = 8,
  JOINROOM_RESULT_FAIL_PLAYER_AMOUNT_EXCEED = 9,
  JOINROOM_RESULT_FAIL_NO_ENOUGH_MONEY = 10,
  JOINROOM_RESULT_FAIL_ROOM_ALREADY_IN_GAME = 11,
  QUITROOM_RESULT_OK = 15,
  QUITROOM_RESULT_FAIL = 16,
  QUITROOM_RESULT_FAIL_NO_SUCH_ROOM = 17,
  QUITROOM_RESULT_FAIL_INVALID_ID = 18,
  GAMESTART_OK = 19,
  GAMESTART_FAIL_NO_SUCH_ROOM = 20,
  GAMESTART_FAIL_NOT_ROOM_OWNER = 21,
  GAMESTART_FAIL_NO_ENOUGH_USER = 22,
  GAMESTART_FAIL_ROOM_ALREADY_IN_GAME = 23,
  PROTO_RESULT_CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PROTO_RESULT_CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PROTO_RESULT_CODE_IsValid(int value);
const PROTO_RESULT_CODE PROTO_RESULT_CODE_MIN = SERVER_LOGIN_RESULT_FAIL_NO_SUCH_PLAYER;
const PROTO_RESULT_CODE PROTO_RESULT_CODE_MAX = GAMESTART_FAIL_ROOM_ALREADY_IN_GAME;
const int PROTO_RESULT_CODE_ARRAYSIZE = PROTO_RESULT_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PROTO_RESULT_CODE_descriptor();
inline const ::std::string& PROTO_RESULT_CODE_Name(PROTO_RESULT_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PROTO_RESULT_CODE_descriptor(), value);
}
inline bool PROTO_RESULT_CODE_Parse(
    const ::std::string& name, PROTO_RESULT_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PROTO_RESULT_CODE>(
    PROTO_RESULT_CODE_descriptor(), name, value);
}
// ===================================================================

class SeatTableItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.SeatTableItem) */ {
 public:
  SeatTableItem();
  virtual ~SeatTableItem();

  SeatTableItem(const SeatTableItem& from);

  inline SeatTableItem& operator=(const SeatTableItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeatTableItem(SeatTableItem&& from) noexcept
    : SeatTableItem() {
    *this = ::std::move(from);
  }

  inline SeatTableItem& operator=(SeatTableItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeatTableItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeatTableItem* internal_default_instance() {
    return reinterpret_cast<const SeatTableItem*>(
               &_SeatTableItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SeatTableItem* other);
  friend void swap(SeatTableItem& a, SeatTableItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeatTableItem* New() const final {
    return CreateMaybeMessage<SeatTableItem>(NULL);
  }

  SeatTableItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SeatTableItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SeatTableItem& from);
  void MergeFrom(const SeatTableItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeatTableItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 SeatNumber = 2;
  void clear_seatnumber();
  static const int kSeatNumberFieldNumber = 2;
  ::google::protobuf::int32 seatnumber() const;
  void set_seatnumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.SeatTableItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 seatnumber_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.Card) */ {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Card(Card&& from) noexcept
    : Card() {
    *this = ::std::move(from);
  }

  inline Card& operator=(Card&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Card* internal_default_instance() {
    return reinterpret_cast<const Card*>(
               &_Card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Card* other);
  friend void swap(Card& a, Card& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Card* New() const final {
    return CreateMaybeMessage<Card>(NULL);
  }

  Card* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Card>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Card* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 suit = 1;
  void clear_suit();
  static const int kSuitFieldNumber = 1;
  ::google::protobuf::int32 suit() const;
  void set_suit(::google::protobuf::int32 value);

  // int32 rank = 2;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.Card)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 suit_;
  ::google::protobuf::int32 rank_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerTryJoin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.PlayerTryJoin) */ {
 public:
  PlayerTryJoin();
  virtual ~PlayerTryJoin();

  PlayerTryJoin(const PlayerTryJoin& from);

  inline PlayerTryJoin& operator=(const PlayerTryJoin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerTryJoin(PlayerTryJoin&& from) noexcept
    : PlayerTryJoin() {
    *this = ::std::move(from);
  }

  inline PlayerTryJoin& operator=(PlayerTryJoin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTryJoin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerTryJoin* internal_default_instance() {
    return reinterpret_cast<const PlayerTryJoin*>(
               &_PlayerTryJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayerTryJoin* other);
  friend void swap(PlayerTryJoin& a, PlayerTryJoin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerTryJoin* New() const final {
    return CreateMaybeMessage<PlayerTryJoin>(NULL);
  }

  PlayerTryJoin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerTryJoin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerTryJoin& from);
  void MergeFrom(const PlayerTryJoin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerTryJoin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 RoomID = 2;
  void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.PlayerTryJoin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerJoinResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.PlayerJoinResult) */ {
 public:
  PlayerJoinResult();
  virtual ~PlayerJoinResult();

  PlayerJoinResult(const PlayerJoinResult& from);

  inline PlayerJoinResult& operator=(const PlayerJoinResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoinResult(PlayerJoinResult&& from) noexcept
    : PlayerJoinResult() {
    *this = ::std::move(from);
  }

  inline PlayerJoinResult& operator=(PlayerJoinResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoinResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoinResult* internal_default_instance() {
    return reinterpret_cast<const PlayerJoinResult*>(
               &_PlayerJoinResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PlayerJoinResult* other);
  friend void swap(PlayerJoinResult& a, PlayerJoinResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoinResult* New() const final {
    return CreateMaybeMessage<PlayerJoinResult>(NULL);
  }

  PlayerJoinResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerJoinResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerJoinResult& from);
  void MergeFrom(const PlayerJoinResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerJoinResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Texus.SeatTableItem SeatTable = 4;
  int seattable_size() const;
  void clear_seattable();
  static const int kSeatTableFieldNumber = 4;
  ::Texus::SeatTableItem* mutable_seattable(int index);
  ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >*
      mutable_seattable();
  const ::Texus::SeatTableItem& seattable(int index) const;
  ::Texus::SeatTableItem* add_seattable();
  const ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >&
      seattable() const;

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 RoomID = 2;
  void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int32 JoinResult = 3;
  void clear_joinresult();
  static const int kJoinResultFieldNumber = 3;
  ::google::protobuf::int32 joinresult() const;
  void set_joinresult(::google::protobuf::int32 value);

  // int32 money = 5;
  void clear_money();
  static const int kMoneyFieldNumber = 5;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.PlayerJoinResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem > seattable_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 joinresult_;
  ::google::protobuf::int32 money_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerTryQuitRoom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.PlayerTryQuitRoom) */ {
 public:
  PlayerTryQuitRoom();
  virtual ~PlayerTryQuitRoom();

  PlayerTryQuitRoom(const PlayerTryQuitRoom& from);

  inline PlayerTryQuitRoom& operator=(const PlayerTryQuitRoom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerTryQuitRoom(PlayerTryQuitRoom&& from) noexcept
    : PlayerTryQuitRoom() {
    *this = ::std::move(from);
  }

  inline PlayerTryQuitRoom& operator=(PlayerTryQuitRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTryQuitRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerTryQuitRoom* internal_default_instance() {
    return reinterpret_cast<const PlayerTryQuitRoom*>(
               &_PlayerTryQuitRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlayerTryQuitRoom* other);
  friend void swap(PlayerTryQuitRoom& a, PlayerTryQuitRoom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerTryQuitRoom* New() const final {
    return CreateMaybeMessage<PlayerTryQuitRoom>(NULL);
  }

  PlayerTryQuitRoom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerTryQuitRoom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerTryQuitRoom& from);
  void MergeFrom(const PlayerTryQuitRoom& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerTryQuitRoom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 RoomID = 2;
  void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.PlayerTryQuitRoom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerQuitRoomResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.PlayerQuitRoomResult) */ {
 public:
  PlayerQuitRoomResult();
  virtual ~PlayerQuitRoomResult();

  PlayerQuitRoomResult(const PlayerQuitRoomResult& from);

  inline PlayerQuitRoomResult& operator=(const PlayerQuitRoomResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuitRoomResult(PlayerQuitRoomResult&& from) noexcept
    : PlayerQuitRoomResult() {
    *this = ::std::move(from);
  }

  inline PlayerQuitRoomResult& operator=(PlayerQuitRoomResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuitRoomResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerQuitRoomResult* internal_default_instance() {
    return reinterpret_cast<const PlayerQuitRoomResult*>(
               &_PlayerQuitRoomResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PlayerQuitRoomResult* other);
  friend void swap(PlayerQuitRoomResult& a, PlayerQuitRoomResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuitRoomResult* New() const final {
    return CreateMaybeMessage<PlayerQuitRoomResult>(NULL);
  }

  PlayerQuitRoomResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerQuitRoomResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerQuitRoomResult& from);
  void MergeFrom(const PlayerQuitRoomResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerQuitRoomResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Texus.SeatTableItem SeatTable = 4;
  int seattable_size() const;
  void clear_seattable();
  static const int kSeatTableFieldNumber = 4;
  ::Texus::SeatTableItem* mutable_seattable(int index);
  ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >*
      mutable_seattable();
  const ::Texus::SeatTableItem& seattable(int index) const;
  ::Texus::SeatTableItem* add_seattable();
  const ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >&
      seattable() const;

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 RoomID = 2;
  void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int32 QuitResult = 3;
  void clear_quitresult();
  static const int kQuitResultFieldNumber = 3;
  ::google::protobuf::int32 quitresult() const;
  void set_quitresult(::google::protobuf::int32 value);

  // int32 money = 5;
  void clear_money();
  static const int kMoneyFieldNumber = 5;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.PlayerQuitRoomResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem > seattable_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 quitresult_;
  ::google::protobuf::int32 money_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastSeatTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.BroadcastSeatTable) */ {
 public:
  BroadcastSeatTable();
  virtual ~BroadcastSeatTable();

  BroadcastSeatTable(const BroadcastSeatTable& from);

  inline BroadcastSeatTable& operator=(const BroadcastSeatTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BroadcastSeatTable(BroadcastSeatTable&& from) noexcept
    : BroadcastSeatTable() {
    *this = ::std::move(from);
  }

  inline BroadcastSeatTable& operator=(BroadcastSeatTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastSeatTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastSeatTable* internal_default_instance() {
    return reinterpret_cast<const BroadcastSeatTable*>(
               &_BroadcastSeatTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BroadcastSeatTable* other);
  friend void swap(BroadcastSeatTable& a, BroadcastSeatTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BroadcastSeatTable* New() const final {
    return CreateMaybeMessage<BroadcastSeatTable>(NULL);
  }

  BroadcastSeatTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastSeatTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BroadcastSeatTable& from);
  void MergeFrom(const BroadcastSeatTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastSeatTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Texus.SeatTableItem SeatTable = 1;
  int seattable_size() const;
  void clear_seattable();
  static const int kSeatTableFieldNumber = 1;
  ::Texus::SeatTableItem* mutable_seattable(int index);
  ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >*
      mutable_seattable();
  const ::Texus::SeatTableItem& seattable(int index) const;
  ::Texus::SeatTableItem* add_seattable();
  const ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >&
      seattable() const;

  // @@protoc_insertion_point(class_scope:Texus.BroadcastSeatTable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem > seattable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.GameStart) */ {
 public:
  GameStart();
  virtual ~GameStart();

  GameStart(const GameStart& from);

  inline GameStart& operator=(const GameStart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameStart(GameStart&& from) noexcept
    : GameStart() {
    *this = ::std::move(from);
  }

  inline GameStart& operator=(GameStart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStart* internal_default_instance() {
    return reinterpret_cast<const GameStart*>(
               &_GameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GameStart* other);
  friend void swap(GameStart& a, GameStart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameStart* New() const final {
    return CreateMaybeMessage<GameStart>(NULL);
  }

  GameStart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameStart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameStart& from);
  void MergeFrom(const GameStart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 RoomID = 2;
  void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.GameStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameStartResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.GameStartResult) */ {
 public:
  GameStartResult();
  virtual ~GameStartResult();

  GameStartResult(const GameStartResult& from);

  inline GameStartResult& operator=(const GameStartResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameStartResult(GameStartResult&& from) noexcept
    : GameStartResult() {
    *this = ::std::move(from);
  }

  inline GameStartResult& operator=(GameStartResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStartResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStartResult* internal_default_instance() {
    return reinterpret_cast<const GameStartResult*>(
               &_GameStartResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GameStartResult* other);
  friend void swap(GameStartResult& a, GameStartResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameStartResult* New() const final {
    return CreateMaybeMessage<GameStartResult>(NULL);
  }

  GameStartResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameStartResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameStartResult& from);
  void MergeFrom(const GameStartResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStartResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Texus.Card flop = 4;
  int flop_size() const;
  void clear_flop();
  static const int kFlopFieldNumber = 4;
  ::Texus::Card* mutable_flop(int index);
  ::google::protobuf::RepeatedPtrField< ::Texus::Card >*
      mutable_flop();
  const ::Texus::Card& flop(int index) const;
  ::Texus::Card* add_flop();
  const ::google::protobuf::RepeatedPtrField< ::Texus::Card >&
      flop() const;

  // repeated .Texus.Card hole = 5;
  int hole_size() const;
  void clear_hole();
  static const int kHoleFieldNumber = 5;
  ::Texus::Card* mutable_hole(int index);
  ::google::protobuf::RepeatedPtrField< ::Texus::Card >*
      mutable_hole();
  const ::Texus::Card& hole(int index) const;
  ::Texus::Card* add_hole();
  const ::google::protobuf::RepeatedPtrField< ::Texus::Card >&
      hole() const;

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 RoomID = 2;
  void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int32 GameStartResult = 3;
  void clear_gamestartresult();
  static const int kGameStartResultFieldNumber = 3;
  ::google::protobuf::int32 gamestartresult() const;
  void set_gamestartresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.GameStartResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Texus::Card > flop_;
  ::google::protobuf::RepeatedPtrField< ::Texus::Card > hole_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 gamestartresult_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Get : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.Get) */ {
 public:
  Get();
  virtual ~Get();

  Get(const Get& from);

  inline Get& operator=(const Get& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Get(Get&& from) noexcept
    : Get() {
    *this = ::std::move(from);
  }

  inline Get& operator=(Get&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Get& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Get* internal_default_instance() {
    return reinterpret_cast<const Get*>(
               &_Get_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Get* other);
  friend void swap(Get& a, Get& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Get* New() const final {
    return CreateMaybeMessage<Get>(NULL);
  }

  Get* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Get>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Get& from);
  void MergeFrom(const Get& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:Texus.Get)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSyncData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.PlayerSyncData) */ {
 public:
  PlayerSyncData();
  virtual ~PlayerSyncData();

  PlayerSyncData(const PlayerSyncData& from);

  inline PlayerSyncData& operator=(const PlayerSyncData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSyncData(PlayerSyncData&& from) noexcept
    : PlayerSyncData() {
    *this = ::std::move(from);
  }

  inline PlayerSyncData& operator=(PlayerSyncData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSyncData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSyncData* internal_default_instance() {
    return reinterpret_cast<const PlayerSyncData*>(
               &_PlayerSyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PlayerSyncData* other);
  friend void swap(PlayerSyncData& a, PlayerSyncData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSyncData* New() const final {
    return CreateMaybeMessage<PlayerSyncData>(NULL);
  }

  PlayerSyncData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSyncData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSyncData& from);
  void MergeFrom(const PlayerSyncData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSyncData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Texus.PlayerSyncData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.PlayerCreateReq) */ {
 public:
  PlayerCreateReq();
  virtual ~PlayerCreateReq();

  PlayerCreateReq(const PlayerCreateReq& from);

  inline PlayerCreateReq& operator=(const PlayerCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateReq(PlayerCreateReq&& from) noexcept
    : PlayerCreateReq() {
    *this = ::std::move(from);
  }

  inline PlayerCreateReq& operator=(PlayerCreateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateReq* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateReq*>(
               &_PlayerCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PlayerCreateReq* other);
  friend void swap(PlayerCreateReq& a, PlayerCreateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateReq* New() const final {
    return CreateMaybeMessage<PlayerCreateReq>(NULL);
  }

  PlayerCreateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateReq& from);
  void MergeFrom(const PlayerCreateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Texus.PlayerCreateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Texus.PlayerCreateRsp) */ {
 public:
  PlayerCreateRsp();
  virtual ~PlayerCreateRsp();

  PlayerCreateRsp(const PlayerCreateRsp& from);

  inline PlayerCreateRsp& operator=(const PlayerCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateRsp(PlayerCreateRsp&& from) noexcept
    : PlayerCreateRsp() {
    *this = ::std::move(from);
  }

  inline PlayerCreateRsp& operator=(PlayerCreateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateRsp*>(
               &_PlayerCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(PlayerCreateRsp* other);
  friend void swap(PlayerCreateRsp& a, PlayerCreateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateRsp* New() const final {
    return CreateMaybeMessage<PlayerCreateRsp>(NULL);
  }

  PlayerCreateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateRsp& from);
  void MergeFrom(const PlayerCreateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 2;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Texus.PlayerCreateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_texus_5froom_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SeatTableItem

// string PlayerID = 1;
inline void SeatTableItem::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeatTableItem::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.SeatTableItem.PlayerID)
  return playerid_.GetNoArena();
}
inline void SeatTableItem::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.SeatTableItem.PlayerID)
}
#if LANG_CXX11
inline void SeatTableItem::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.SeatTableItem.PlayerID)
}
#endif
inline void SeatTableItem::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.SeatTableItem.PlayerID)
}
inline void SeatTableItem::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.SeatTableItem.PlayerID)
}
inline ::std::string* SeatTableItem::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.SeatTableItem.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeatTableItem::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.SeatTableItem.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeatTableItem::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.SeatTableItem.PlayerID)
}

// int32 SeatNumber = 2;
inline void SeatTableItem::clear_seatnumber() {
  seatnumber_ = 0;
}
inline ::google::protobuf::int32 SeatTableItem::seatnumber() const {
  // @@protoc_insertion_point(field_get:Texus.SeatTableItem.SeatNumber)
  return seatnumber_;
}
inline void SeatTableItem::set_seatnumber(::google::protobuf::int32 value) {
  
  seatnumber_ = value;
  // @@protoc_insertion_point(field_set:Texus.SeatTableItem.SeatNumber)
}

// -------------------------------------------------------------------

// Card

// int32 suit = 1;
inline void Card::clear_suit() {
  suit_ = 0;
}
inline ::google::protobuf::int32 Card::suit() const {
  // @@protoc_insertion_point(field_get:Texus.Card.suit)
  return suit_;
}
inline void Card::set_suit(::google::protobuf::int32 value) {
  
  suit_ = value;
  // @@protoc_insertion_point(field_set:Texus.Card.suit)
}

// int32 rank = 2;
inline void Card::clear_rank() {
  rank_ = 0;
}
inline ::google::protobuf::int32 Card::rank() const {
  // @@protoc_insertion_point(field_get:Texus.Card.rank)
  return rank_;
}
inline void Card::set_rank(::google::protobuf::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:Texus.Card.rank)
}

// -------------------------------------------------------------------

// PlayerTryJoin

// string PlayerID = 1;
inline void PlayerTryJoin::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerTryJoin::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerTryJoin.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerTryJoin::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerTryJoin.PlayerID)
}
#if LANG_CXX11
inline void PlayerTryJoin::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerTryJoin.PlayerID)
}
#endif
inline void PlayerTryJoin::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerTryJoin.PlayerID)
}
inline void PlayerTryJoin::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerTryJoin.PlayerID)
}
inline ::std::string* PlayerTryJoin::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerTryJoin.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerTryJoin::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.PlayerTryJoin.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerTryJoin::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerTryJoin.PlayerID)
}

// int32 RoomID = 2;
inline void PlayerTryJoin::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 PlayerTryJoin::roomid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerTryJoin.RoomID)
  return roomid_;
}
inline void PlayerTryJoin::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerTryJoin.RoomID)
}

// -------------------------------------------------------------------

// PlayerJoinResult

// string PlayerID = 1;
inline void PlayerJoinResult::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerJoinResult::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerJoinResult.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerJoinResult::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerJoinResult.PlayerID)
}
#if LANG_CXX11
inline void PlayerJoinResult::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerJoinResult.PlayerID)
}
#endif
inline void PlayerJoinResult::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerJoinResult.PlayerID)
}
inline void PlayerJoinResult::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerJoinResult.PlayerID)
}
inline ::std::string* PlayerJoinResult::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerJoinResult.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerJoinResult::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.PlayerJoinResult.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerJoinResult::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerJoinResult.PlayerID)
}

// int32 RoomID = 2;
inline void PlayerJoinResult::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 PlayerJoinResult::roomid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerJoinResult.RoomID)
  return roomid_;
}
inline void PlayerJoinResult::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerJoinResult.RoomID)
}

// int32 JoinResult = 3;
inline void PlayerJoinResult::clear_joinresult() {
  joinresult_ = 0;
}
inline ::google::protobuf::int32 PlayerJoinResult::joinresult() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerJoinResult.JoinResult)
  return joinresult_;
}
inline void PlayerJoinResult::set_joinresult(::google::protobuf::int32 value) {
  
  joinresult_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerJoinResult.JoinResult)
}

// repeated .Texus.SeatTableItem SeatTable = 4;
inline int PlayerJoinResult::seattable_size() const {
  return seattable_.size();
}
inline void PlayerJoinResult::clear_seattable() {
  seattable_.Clear();
}
inline ::Texus::SeatTableItem* PlayerJoinResult::mutable_seattable(int index) {
  // @@protoc_insertion_point(field_mutable:Texus.PlayerJoinResult.SeatTable)
  return seattable_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >*
PlayerJoinResult::mutable_seattable() {
  // @@protoc_insertion_point(field_mutable_list:Texus.PlayerJoinResult.SeatTable)
  return &seattable_;
}
inline const ::Texus::SeatTableItem& PlayerJoinResult::seattable(int index) const {
  // @@protoc_insertion_point(field_get:Texus.PlayerJoinResult.SeatTable)
  return seattable_.Get(index);
}
inline ::Texus::SeatTableItem* PlayerJoinResult::add_seattable() {
  // @@protoc_insertion_point(field_add:Texus.PlayerJoinResult.SeatTable)
  return seattable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >&
PlayerJoinResult::seattable() const {
  // @@protoc_insertion_point(field_list:Texus.PlayerJoinResult.SeatTable)
  return seattable_;
}

// int32 money = 5;
inline void PlayerJoinResult::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 PlayerJoinResult::money() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerJoinResult.money)
  return money_;
}
inline void PlayerJoinResult::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerJoinResult.money)
}

// -------------------------------------------------------------------

// PlayerTryQuitRoom

// string PlayerID = 1;
inline void PlayerTryQuitRoom::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerTryQuitRoom::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerTryQuitRoom.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerTryQuitRoom::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerTryQuitRoom.PlayerID)
}
#if LANG_CXX11
inline void PlayerTryQuitRoom::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerTryQuitRoom.PlayerID)
}
#endif
inline void PlayerTryQuitRoom::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerTryQuitRoom.PlayerID)
}
inline void PlayerTryQuitRoom::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerTryQuitRoom.PlayerID)
}
inline ::std::string* PlayerTryQuitRoom::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerTryQuitRoom.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerTryQuitRoom::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.PlayerTryQuitRoom.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerTryQuitRoom::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerTryQuitRoom.PlayerID)
}

// int32 RoomID = 2;
inline void PlayerTryQuitRoom::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 PlayerTryQuitRoom::roomid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerTryQuitRoom.RoomID)
  return roomid_;
}
inline void PlayerTryQuitRoom::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerTryQuitRoom.RoomID)
}

// -------------------------------------------------------------------

// PlayerQuitRoomResult

// string PlayerID = 1;
inline void PlayerQuitRoomResult::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerQuitRoomResult::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerQuitRoomResult.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerQuitRoomResult::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerQuitRoomResult.PlayerID)
}
#if LANG_CXX11
inline void PlayerQuitRoomResult::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerQuitRoomResult.PlayerID)
}
#endif
inline void PlayerQuitRoomResult::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerQuitRoomResult.PlayerID)
}
inline void PlayerQuitRoomResult::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerQuitRoomResult.PlayerID)
}
inline ::std::string* PlayerQuitRoomResult::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerQuitRoomResult.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerQuitRoomResult::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.PlayerQuitRoomResult.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerQuitRoomResult::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerQuitRoomResult.PlayerID)
}

// int32 RoomID = 2;
inline void PlayerQuitRoomResult::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 PlayerQuitRoomResult::roomid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerQuitRoomResult.RoomID)
  return roomid_;
}
inline void PlayerQuitRoomResult::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerQuitRoomResult.RoomID)
}

// int32 QuitResult = 3;
inline void PlayerQuitRoomResult::clear_quitresult() {
  quitresult_ = 0;
}
inline ::google::protobuf::int32 PlayerQuitRoomResult::quitresult() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerQuitRoomResult.QuitResult)
  return quitresult_;
}
inline void PlayerQuitRoomResult::set_quitresult(::google::protobuf::int32 value) {
  
  quitresult_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerQuitRoomResult.QuitResult)
}

// repeated .Texus.SeatTableItem SeatTable = 4;
inline int PlayerQuitRoomResult::seattable_size() const {
  return seattable_.size();
}
inline void PlayerQuitRoomResult::clear_seattable() {
  seattable_.Clear();
}
inline ::Texus::SeatTableItem* PlayerQuitRoomResult::mutable_seattable(int index) {
  // @@protoc_insertion_point(field_mutable:Texus.PlayerQuitRoomResult.SeatTable)
  return seattable_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >*
PlayerQuitRoomResult::mutable_seattable() {
  // @@protoc_insertion_point(field_mutable_list:Texus.PlayerQuitRoomResult.SeatTable)
  return &seattable_;
}
inline const ::Texus::SeatTableItem& PlayerQuitRoomResult::seattable(int index) const {
  // @@protoc_insertion_point(field_get:Texus.PlayerQuitRoomResult.SeatTable)
  return seattable_.Get(index);
}
inline ::Texus::SeatTableItem* PlayerQuitRoomResult::add_seattable() {
  // @@protoc_insertion_point(field_add:Texus.PlayerQuitRoomResult.SeatTable)
  return seattable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >&
PlayerQuitRoomResult::seattable() const {
  // @@protoc_insertion_point(field_list:Texus.PlayerQuitRoomResult.SeatTable)
  return seattable_;
}

// int32 money = 5;
inline void PlayerQuitRoomResult::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 PlayerQuitRoomResult::money() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerQuitRoomResult.money)
  return money_;
}
inline void PlayerQuitRoomResult::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerQuitRoomResult.money)
}

// -------------------------------------------------------------------

// BroadcastSeatTable

// repeated .Texus.SeatTableItem SeatTable = 1;
inline int BroadcastSeatTable::seattable_size() const {
  return seattable_.size();
}
inline void BroadcastSeatTable::clear_seattable() {
  seattable_.Clear();
}
inline ::Texus::SeatTableItem* BroadcastSeatTable::mutable_seattable(int index) {
  // @@protoc_insertion_point(field_mutable:Texus.BroadcastSeatTable.SeatTable)
  return seattable_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >*
BroadcastSeatTable::mutable_seattable() {
  // @@protoc_insertion_point(field_mutable_list:Texus.BroadcastSeatTable.SeatTable)
  return &seattable_;
}
inline const ::Texus::SeatTableItem& BroadcastSeatTable::seattable(int index) const {
  // @@protoc_insertion_point(field_get:Texus.BroadcastSeatTable.SeatTable)
  return seattable_.Get(index);
}
inline ::Texus::SeatTableItem* BroadcastSeatTable::add_seattable() {
  // @@protoc_insertion_point(field_add:Texus.BroadcastSeatTable.SeatTable)
  return seattable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Texus::SeatTableItem >&
BroadcastSeatTable::seattable() const {
  // @@protoc_insertion_point(field_list:Texus.BroadcastSeatTable.SeatTable)
  return seattable_;
}

// -------------------------------------------------------------------

// GameStart

// string PlayerID = 1;
inline void GameStart::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameStart::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.GameStart.PlayerID)
  return playerid_.GetNoArena();
}
inline void GameStart::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.GameStart.PlayerID)
}
#if LANG_CXX11
inline void GameStart::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.GameStart.PlayerID)
}
#endif
inline void GameStart::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.GameStart.PlayerID)
}
inline void GameStart::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.GameStart.PlayerID)
}
inline ::std::string* GameStart::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.GameStart.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStart::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.GameStart.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStart::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.GameStart.PlayerID)
}

// int32 RoomID = 2;
inline void GameStart::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameStart::roomid() const {
  // @@protoc_insertion_point(field_get:Texus.GameStart.RoomID)
  return roomid_;
}
inline void GameStart::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Texus.GameStart.RoomID)
}

// -------------------------------------------------------------------

// GameStartResult

// string PlayerID = 1;
inline void GameStartResult::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameStartResult::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.GameStartResult.PlayerID)
  return playerid_.GetNoArena();
}
inline void GameStartResult::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.GameStartResult.PlayerID)
}
#if LANG_CXX11
inline void GameStartResult::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.GameStartResult.PlayerID)
}
#endif
inline void GameStartResult::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.GameStartResult.PlayerID)
}
inline void GameStartResult::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.GameStartResult.PlayerID)
}
inline ::std::string* GameStartResult::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.GameStartResult.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameStartResult::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.GameStartResult.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameStartResult::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.GameStartResult.PlayerID)
}

// int32 RoomID = 2;
inline void GameStartResult::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 GameStartResult::roomid() const {
  // @@protoc_insertion_point(field_get:Texus.GameStartResult.RoomID)
  return roomid_;
}
inline void GameStartResult::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Texus.GameStartResult.RoomID)
}

// int32 GameStartResult = 3;
inline void GameStartResult::clear_gamestartresult() {
  gamestartresult_ = 0;
}
inline ::google::protobuf::int32 GameStartResult::gamestartresult() const {
  // @@protoc_insertion_point(field_get:Texus.GameStartResult.GameStartResult)
  return gamestartresult_;
}
inline void GameStartResult::set_gamestartresult(::google::protobuf::int32 value) {
  
  gamestartresult_ = value;
  // @@protoc_insertion_point(field_set:Texus.GameStartResult.GameStartResult)
}

// repeated .Texus.Card flop = 4;
inline int GameStartResult::flop_size() const {
  return flop_.size();
}
inline void GameStartResult::clear_flop() {
  flop_.Clear();
}
inline ::Texus::Card* GameStartResult::mutable_flop(int index) {
  // @@protoc_insertion_point(field_mutable:Texus.GameStartResult.flop)
  return flop_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Texus::Card >*
GameStartResult::mutable_flop() {
  // @@protoc_insertion_point(field_mutable_list:Texus.GameStartResult.flop)
  return &flop_;
}
inline const ::Texus::Card& GameStartResult::flop(int index) const {
  // @@protoc_insertion_point(field_get:Texus.GameStartResult.flop)
  return flop_.Get(index);
}
inline ::Texus::Card* GameStartResult::add_flop() {
  // @@protoc_insertion_point(field_add:Texus.GameStartResult.flop)
  return flop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Texus::Card >&
GameStartResult::flop() const {
  // @@protoc_insertion_point(field_list:Texus.GameStartResult.flop)
  return flop_;
}

// repeated .Texus.Card hole = 5;
inline int GameStartResult::hole_size() const {
  return hole_.size();
}
inline void GameStartResult::clear_hole() {
  hole_.Clear();
}
inline ::Texus::Card* GameStartResult::mutable_hole(int index) {
  // @@protoc_insertion_point(field_mutable:Texus.GameStartResult.hole)
  return hole_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Texus::Card >*
GameStartResult::mutable_hole() {
  // @@protoc_insertion_point(field_mutable_list:Texus.GameStartResult.hole)
  return &hole_;
}
inline const ::Texus::Card& GameStartResult::hole(int index) const {
  // @@protoc_insertion_point(field_get:Texus.GameStartResult.hole)
  return hole_.Get(index);
}
inline ::Texus::Card* GameStartResult::add_hole() {
  // @@protoc_insertion_point(field_add:Texus.GameStartResult.hole)
  return hole_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Texus::Card >&
GameStartResult::hole() const {
  // @@protoc_insertion_point(field_list:Texus.GameStartResult.hole)
  return hole_;
}

// -------------------------------------------------------------------

// Get

// string PlayerID = 1;
inline void Get::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Get::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.Get.PlayerID)
  return playerid_.GetNoArena();
}
inline void Get::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.Get.PlayerID)
}
#if LANG_CXX11
inline void Get::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.Get.PlayerID)
}
#endif
inline void Get::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.Get.PlayerID)
}
inline void Get::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.Get.PlayerID)
}
inline ::std::string* Get::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.Get.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Get::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.Get.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Get::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.Get.PlayerID)
}

// string Password = 2;
inline void Get::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Get::password() const {
  // @@protoc_insertion_point(field_get:Texus.Get.Password)
  return password_.GetNoArena();
}
inline void Get::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.Get.Password)
}
#if LANG_CXX11
inline void Get::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.Get.Password)
}
#endif
inline void Get::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.Get.Password)
}
inline void Get::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.Get.Password)
}
inline ::std::string* Get::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Texus.Get.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Get::release_password() {
  // @@protoc_insertion_point(field_release:Texus.Get.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Get::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Texus.Get.Password)
}

// -------------------------------------------------------------------

// PlayerSyncData

// bytes Name = 1;
inline void PlayerSyncData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSyncData::name() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerSyncData.Name)
  return name_.GetNoArena();
}
inline void PlayerSyncData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerSyncData.Name)
}
#if LANG_CXX11
inline void PlayerSyncData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerSyncData.Name)
}
#endif
inline void PlayerSyncData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerSyncData.Name)
}
inline void PlayerSyncData::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerSyncData.Name)
}
inline ::std::string* PlayerSyncData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerSyncData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSyncData::release_name() {
  // @@protoc_insertion_point(field_release:Texus.PlayerSyncData.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSyncData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerSyncData.Name)
}

// -------------------------------------------------------------------

// PlayerCreateReq

// string PlayerID = 1;
inline void PlayerCreateReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerCreateReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerCreateReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerCreateReq.PlayerID)
}
#endif
inline void PlayerCreateReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerCreateReq.PlayerID)
}
inline void PlayerCreateReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerCreateReq.PlayerID)
}
inline ::std::string* PlayerCreateReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerCreateReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.PlayerCreateReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerCreateReq.PlayerID)
}

// string Password = 2;
inline void PlayerCreateReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::password() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerCreateReq.Password)
  return password_.GetNoArena();
}
inline void PlayerCreateReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerCreateReq.Password)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerCreateReq.Password)
}
#endif
inline void PlayerCreateReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerCreateReq.Password)
}
inline void PlayerCreateReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerCreateReq.Password)
}
inline ::std::string* PlayerCreateReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerCreateReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_password() {
  // @@protoc_insertion_point(field_release:Texus.PlayerCreateReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerCreateReq.Password)
}

// bytes Name = 3;
inline void PlayerCreateReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::name() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerCreateReq.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerCreateReq.Name)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerCreateReq.Name)
}
#endif
inline void PlayerCreateReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerCreateReq.Name)
}
inline void PlayerCreateReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerCreateReq.Name)
}
inline ::std::string* PlayerCreateReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerCreateReq.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_name() {
  // @@protoc_insertion_point(field_release:Texus.PlayerCreateReq.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerCreateReq.Name)
}

// -------------------------------------------------------------------

// PlayerCreateRsp

// int32 Result = 1;
inline void PlayerCreateRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerCreateRsp::result() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerCreateRsp.Result)
  return result_;
}
inline void PlayerCreateRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:Texus.PlayerCreateRsp.Result)
}

// string PlayerID = 2;
inline void PlayerCreateRsp::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::playerid() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerCreateRsp.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateRsp::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerCreateRsp.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerCreateRsp.PlayerID)
}
#endif
inline void PlayerCreateRsp::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerCreateRsp.PlayerID)
}
inline void PlayerCreateRsp::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerCreateRsp.PlayerID)
}
inline ::std::string* PlayerCreateRsp::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerCreateRsp.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_playerid() {
  // @@protoc_insertion_point(field_release:Texus.PlayerCreateRsp.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerCreateRsp.PlayerID)
}

// bytes Name = 3;
inline void PlayerCreateRsp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::name() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerCreateRsp.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateRsp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerCreateRsp.Name)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerCreateRsp.Name)
}
#endif
inline void PlayerCreateRsp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerCreateRsp.Name)
}
inline void PlayerCreateRsp::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerCreateRsp.Name)
}
inline ::std::string* PlayerCreateRsp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerCreateRsp.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_name() {
  // @@protoc_insertion_point(field_release:Texus.PlayerCreateRsp.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerCreateRsp.Name)
}

// string Reason = 4;
inline void PlayerCreateRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::reason() const {
  // @@protoc_insertion_point(field_get:Texus.PlayerCreateRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerCreateRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Texus.PlayerCreateRsp.Reason)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Texus.PlayerCreateRsp.Reason)
}
#endif
inline void PlayerCreateRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Texus.PlayerCreateRsp.Reason)
}
inline void PlayerCreateRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Texus.PlayerCreateRsp.Reason)
}
inline ::std::string* PlayerCreateRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:Texus.PlayerCreateRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_reason() {
  // @@protoc_insertion_point(field_release:Texus.PlayerCreateRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:Texus.PlayerCreateRsp.Reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Texus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Texus::CLIENT_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Texus::CLIENT_CMD>() {
  return ::Texus::CLIENT_CMD_descriptor();
}
template <> struct is_proto_enum< ::Texus::SERVER_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Texus::SERVER_CMD>() {
  return ::Texus::SERVER_CMD_descriptor();
}
template <> struct is_proto_enum< ::Texus::PROTO_RESULT_CODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Texus::PROTO_RESULT_CODE>() {
  return ::Texus::PROTO_RESULT_CODE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_texus_5froom_2eproto
